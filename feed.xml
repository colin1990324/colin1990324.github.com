<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">RuiMakes</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://wurui.cc/feed.xml" />
<link rel="alternate" type="text/html" href="http://wurui.cc" />
<updated>2020-07-11T14:43:31+08:00</updated>
<id>http://wurui.cc/</id>
<author>
  <name>Wu Rui</name>
  <uri>http://wurui.cc/</uri>
  <email>ruiwu1990324@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[同时缴三份个税？互联网个税怎么算！]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/blog/individual-income-tax-in-china/" />
  <id>http://wurui.cc/blog/individual-income-tax-in-china</id>
  <published>2020-07-08T16:00:20+08:00</published>
  <updated>2020-07-08T16:00:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;身在互联网企业的同学每年都要缴纳数万甚至数十万的税款。而现行的个税计算方式确实比较复杂，一问同事都说不清楚，只感觉国家对中产阶级收割的厉害。那到底在新税法下，个税分为几部分收，有哪些税收优惠我们是确实享受到了的。下面用一篇文章尽量简短的说清楚。&lt;/p&gt;

&lt;h2 id=&quot;个税组成&quot;&gt;个税组成&lt;/h2&gt;
&lt;p&gt;对于一个在互联网企业工作的同学，特别是上市公司的。HR招聘的时候都会跟你提到一个年度总包的概念。这里以阿里为例，构成如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;年度总包&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;月度基本工资&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;第13薪&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;年终奖&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;股票行权所得&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对年度总包，我们在纳税的时候其实分为了三部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对基本工资的&lt;strong&gt;应纳税部分&lt;/strong&gt;，按&lt;strong&gt;年度税表&lt;/strong&gt;扣税。&lt;/li&gt;
  &lt;li&gt;对年终奖的&lt;strong&gt;全额&lt;/strong&gt;，采用&lt;strong&gt;月度税表&lt;/strong&gt;扣税。且&lt;strong&gt;每年仅能享受一次&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;对股权行权所得的&lt;strong&gt;全额&lt;/strong&gt;，再一次按&lt;strong&gt;年度税表&lt;/strong&gt;扣税。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这里有一个Key Point，你的三部分收入是拆分开的，每一份都是享受了从3%到45%的7级阶梯税率。&lt;/p&gt;

&lt;h2 id=&quot;年度综合所得&quot;&gt;年度综合所得&lt;/h2&gt;
&lt;p&gt;即你的基本工资的计税方式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;年度应纳税收入&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;工资&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;补贴&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;免税额&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;四金&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;六项附加扣除&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;工资税&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;年度应纳税收入&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;年度税率&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;速算扣除&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/monthly_trend.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;年终奖&quot;&gt;年终奖&lt;/h2&gt;
&lt;p&gt;即你的年终奖的计税方式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;月度税率&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;年终奖&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;月度税表&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;年终奖税&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;年终奖&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;月度税率&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;速算扣除&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;年终奖的税收优惠可以理解为，12个月的奖励也给你分摊到了12个月后来看税率。而且是基于一个新的从3%开始的梯度，而不是基于工资税已经累计的梯度。&lt;/p&gt;

&lt;h3 id=&quot;年终奖多一块钱要多缴一千税&quot;&gt;年终奖多一块钱要多缴一千税？&lt;/h3&gt;
&lt;p&gt;网上看到有人反馈，年终奖多了，到手的反而少了很多。这里的坑就在于税率变化的跳跃性，而速算扣除没有衔接上，导致了断崖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/bonus_trend.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;股权激励&quot;&gt;股权激励&lt;/h2&gt;
&lt;p&gt;即公司授予的股权在行权时的计税方式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;股权激励收入&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;股票市价或公允价&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;行权价&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;行权数&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;股权税&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;股权激励收入&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;年度税率&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;速算扣除&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/stock_trend.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里和工资税一样仍然使用年度税表，没有扣除项。这里是你第三次享受阶梯税率。&lt;/p&gt;

&lt;h2 id=&quot;未来变化&quot;&gt;未来变化&lt;/h2&gt;
&lt;p&gt;根据《关于个人所得税法修改后有关优惠政策衔接问题的通知》第二条第（三）项规定，2022年1月1日之后的政策另行明确。&lt;/p&gt;

&lt;p&gt;中产阶级最大的恐慌便在于未来政策的不明确性。如果2022之后年终奖和股权激励的拆分计税优惠取消，那个人三大收入来源都需要在一个阶梯上进行累加，在高税率梯度上的部分就会显著增加，可以说是刀刀都在肉上。&lt;/p&gt;

&lt;p&gt;以个人年收入50W的张先生为例。假设张先生月收入2W，年终奖16W，股权激励10W。按现行税法，年缴税为8280+30590+7480共计46350元（综合税率9.27%）。而取消拆分优惠之后，年缴税则为60080元（综合税率12.0%），增加了13730元之多。&lt;/p&gt;

&lt;p&gt;从我个人来讲，如果国家要在2022年取消现行的优惠政策。那么希望届时，以家庭为单位的综合计税方案能够推出。我和我的同事有不少是单职工在上班，那么全家3到4口人其实只有一个人的收入。家庭综合计税更能适应国情，也能代位减轻整个家庭的税务负担，甚至还能鼓励生育哟。&lt;/p&gt;

&lt;h2 id=&quot;其他细节问题&quot;&gt;其他细节问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;什么是预扣税
    &lt;ul&gt;
      &lt;li&gt;按当月累计年收入的应纳税部分，对应税表计算，扣除已交税后为当月预扣税。简单说就是假设每个月都是你当年最后一次领工资，当年累计应该交的税减去已经交过的，就是这个月的税。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;年度结算的时候为什么需要补税？
    &lt;ul&gt;
      &lt;li&gt;有换公司的同学，新公司对已缴税情况不清楚的，从0开始累计年收入。从而导致每个月的预扣税都不足，在年终汇算时会提示补税。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;年度结算的时候有没有可能退税？
    &lt;ul&gt;
      &lt;li&gt;个人经验一般是六项附件扣除没有填报，或者填报月数没有足额，在APP里修正后会提示可以退税。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一年中股票多次行权怎么扣税？
    &lt;ul&gt;
      &lt;li&gt;需要合并计税。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;卖股票的时候还要再次缴税吗？
    &lt;ul&gt;
      &lt;li&gt;股权行权是缴税到行权时间点为止，以行权时价格为基准。后续股价如果涨了，则另行缴纳20%的资本得利税。跌了国家当然不会补贴你的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第13薪怎么缴税
    &lt;ul&gt;
      &lt;li&gt;由于年终奖的计税较为优惠，第13薪一般是和年终奖一并保税的。具体每家公司有所不同，优劣也要看你的年终奖数额和累计收入情况。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;年终奖也可以直接在年度综合所得计税，但是一般只对低收入人群有帮助。&lt;/li&gt;
  &lt;li&gt;年终奖能否避免税率跳跃的坑？
    &lt;ul&gt;
      &lt;li&gt;一般需要公司合理规划年终奖发放，避免刚好跨过下一级税率的情况。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;年度税表明细
&lt;img src=&quot;http://wurui.cc/images/blog/年度税表.jpeg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;月度税表明细
&lt;img src=&quot;http://wurui.cc/images/blog/月度税表.jpeg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;《关于个人所得税法修改后有关优惠政策衔接问题的通知》（财税〔2018〕164号）&lt;/li&gt;
  &lt;li&gt;《财政部 国家税务总局关于个人股票期权所得征收个人所得税问题的通知》（财税〔2005〕35号）&lt;/li&gt;
  &lt;li&gt;《全国人民代表大会常务委员会关于修改&lt;中华人民共和国个人所得税法&gt;的决定》&lt;/中华人民共和国个人所得税法&gt;&lt;/li&gt;
  &lt;li&gt;《个人所得税扣缴申报管理办法（试行）》&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;p&gt;各个计税函数、增长曲线、实例都在&lt;a href=&quot;http://wurui.cc/images/blog/税务估算.ipynb&quot;&gt;notebook&lt;/a&gt;中。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/blog/individual-income-tax-in-china/&quot;&gt;同时缴三份个税？互联网个税怎么算！&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on July 08, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[家庭网络升级路3-网络服务]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/home-network-upgrading-3/" />
  <id>http://wurui.cc/tech/home-network-upgrading-3</id>
  <published>2020-07-02T18:26:20+08:00</published>
  <updated>2020-07-02T18:26:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;本文是家庭网络升级路的第三篇。前面两篇介绍了主干路由的升级情况，还购置了一台品牌NAS。那么除了单纯的上网冲浪，我们还能为家庭提供哪些便利的服务呢？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/7.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先在NAS平台上，系统原生就提供了丰富的应用软件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于存储之上的，有Qsync等文件备份软件。可以将本地文件和NAS文件进行双向同步，即类似于百度和Google的同步盘。&lt;/li&gt;
  &lt;li&gt;使用SMB或者NFS远程挂载，可以把NAS文件夹挂载到本地，像本地空间一样使用，再也不会担心笔记本磁盘空间不够了。&lt;/li&gt;
  &lt;li&gt;在影音娱乐层面，有一大波相册、音乐、视频、影院套件。可以完全支撑HTPC的功能，也能支持智能电视或者电视盒子播放。&lt;/li&gt;
  &lt;li&gt;PT下载也是不能少的，除了自带的DownloadStation，还有好用的Transmission和Qbittorrents。上班时间下片，晚上回家直接播放，再大硬盘都能给你快速塞满。&lt;/li&gt;
  &lt;li&gt;虚拟化，因为是X86的版本，VirtualizationStation支持各类虚拟机。我就跑了一个Windows 10 LTSC版本，不方面直接在NAS部署的日常软件，都可以在虚拟机中得到满足。&lt;/li&gt;
  &lt;li&gt;容器化，依靠自带的ContainerStation，你便拥有了Docker的无限可能。GPU深度学习库，MongoDB/Redis数据库，私有Gitlab/Jenkinds服务，WordPress个人博客，甚至是Minecraft私服，都可以一键部署！小孩子才做选择，成年人当然是全部都要！&lt;/li&gt;
  &lt;li&gt;以上都是个人经验，我玩NAS的时间还很短，肯定不是最优方案，大家谨慎参考。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/14.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Tplink的路由器体系为我提供了基础的网管功能，这些能力在主流路由器上应该是通用的。值得一提的是Tplink的APP，我用着非常顺手。可以在任何地点远程管理家庭网络，网络拓扑图也很清晰。我在主路由上开启的服务有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上网拨号、DHCP、设备管理、流量控制、未来的IPv6支持。&lt;/li&gt;
  &lt;li&gt;在应用管理中，Tplink提供免费的DDNS服务，只要你有公网IP，即可利用NAS提供公网服务了。我家里是300M电信宽带，打电话要到公网IP只花了一分钟，设置DDNS也只需要再花一分钟，非常的方便。&lt;/li&gt;
  &lt;li&gt;主路由作为对外网关，还有一个重要的服务是NAT网络地址转换。对内网服务做端口映射，和DDNS配合起来才能顺利提供便利的外网服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/15.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在主干网更新之后，我还购入了一台斐讯的N1盒子。刷好Openwrt系统接入主路由作为旁路由（单臂路由）。N1盒子是一款矿渣产品，便宜的时候只要八九十一台，性能却非常强悍，作为电视盒子可以解4K视频。刷了Openwrt以后就成为了一台非常强力的网络设备，功耗却不到3W。Openwrt提供了丰富的功能和插件，现在用到的有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VPN科学上网，openwrt有好多款支持的插件。我目前使用的是Passwall，看评测性能和开销都是尚可的。&lt;/li&gt;
  &lt;li&gt;SmartDNS，启用以后可以为家庭网络提供私有DNS服务。能力是在域名查询时，返回你的网络环境下最低延时的IP，从而实现高速打开网页。同时支持第二DNS分组，配合Passwall，可以将内外网的DNS请求分流。避免国内服务查google DNS，国外服务查114导致的绕路情况。&lt;/li&gt;
  &lt;li&gt;Adblock广告屏蔽。原理很简单，就是对网页内嵌广告HTTP请求做了拦截。黑名单都是在网上同步获取的，使用起来很方便。启用以后在芒果TV看《向往的生活》再也不用等80秒的广告了。&lt;/li&gt;
  &lt;li&gt;以上服务在一起组合成了智能网关和智能DNS。由于我是旁路由接入的，希望使用这些功能的设备可以通过手动设置网关和DNS来接入。老人、访客等就使用主路由的默认功能就好了。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/16.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/home-network-upgrading-3/&quot;&gt;家庭网络升级路3-网络服务&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on July 02, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[家庭网络升级路2-NAS搭建]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/home-network-upgrading-2/" />
  <id>http://wurui.cc/tech/home-network-upgrading-2</id>
  <published>2020-07-02T11:06:20+08:00</published>
  <updated>2020-07-02T11:06:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;每当手机空间不够用的时候，老爹都会删掉一些照片视频，颇为可惜。每次出游回家，从相机导出照片的时候，老爹又会说，买个大硬盘把这些照片都好好保存起来。周末在家打整好花园以后，老爹静态娱乐最大的爱好就是躺在罗汉床上看看老电影。综上，我认为家里还是有一些大容量存储，影音娱乐服务的需求的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/9.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NAS有多种方案，比如准系统、完全自己搭建、矿渣、服务器、品牌机。本着省事儿，在一定预算范围内最优化配置和体验的指导思想下。我这里选择了性价比较高的品牌机QNAP 453Bmini，618价格是1900内。配置是Intel J3455 4核心，x86架构 64位系统，内存替换了一条8G DDR3。4个SATA 3.5寸硬盘位，两个千兆网口，带HDMI和USB3的接口。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/10.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除去主机的成本，硬盘才是整套NAS系统开销的大头。本着够用的原则，我选择了240G SSD + 4T 希捷酷狼组成一个Qiter分层存储池作为主空间。再用一块4T 希捷酷鹰静态挂载作为影音存储。目前使用了三个盘位，成本是1600元，总空间是8T左右。按目前的生产速度，主空间应该还能够再满足几年的照片和资料备份需求。重要资料同步备份到台式机中，再用一块老的移动硬盘定期冷备份。这样三块介质冷热备份，即便不组raid，重要资料的安全性应该还是能够得到保障的。盘位没有一次性去插满，主要是考虑单位存储价格肯定是持续走低的，硬盘以5-7年为周期逐步更换我认为是最优的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/11.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;额外还给系统配备了一台UPS，型号是山特的TG-BOX 850，不间断功率510W/850VA。支持NAS的UPS可以通过USB与NAS链接。在NAS上设置10分钟断电关机，可以保障突然断电对硬盘带来的损坏。不知这500块钱能否够值回它的票价。没有选择其他品牌（比如APC）的原因主要是山特这款设计的挺漂亮的，规规整整，插口也特别多，完全可以兼做一个大型插线板。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/12.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再讨论一下链路问题，453Bmini只有两个双千兆口，没有直接支持万兆。我虽然偶尔做点小视频，但也没有视频工作室那样的高速大容量传输需求。再考虑到万兆整体成本非常高（全套交换机、网卡），我的NAS也没有组raid和高速缓存，那不如就直接放弃万兆了。双网口链路聚合就是比千兆稍微强一点的选择，而只需要一台网管型交换机，一块双网口网卡就可以了，200块钱就能搞定。另外QNAP自己有USB3.0转电口的5Gbps模块，看着还是挺小巧美观的，有需要的也可以尝试这套方案，成本1200左右。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/6.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;硬件目前就是这样了，总价格在4200左右。大容量私人网盘，珍贵的家庭照片再也别删了。PT下载，私人家庭影院服务，你值得拥有！&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/home-network-upgrading-2/&quot;&gt;家庭网络升级路2-NAS搭建&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on July 02, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[家庭网络升级路1-骨干网升级]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/home-network-upgrading-1/" />
  <id>http://wurui.cc/tech/home-network-upgrading-1</id>
  <published>2020-07-01T11:17:20+08:00</published>
  <updated>2020-07-01T11:17:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;2015年回成都以后，我多次对家庭网络进行升级。入户带宽从DSL的20Mbps提升到了光纤的300Mbps。这中间也有一些坎坷，简单记录一下。&lt;/p&gt;

&lt;p&gt;03年我们一家就搬到了现在住的房子，最开始应该是电话线拨号上网的。中间可能还用过同轴电缆的宽带，记忆都很模糊了。一直到2016年，全家升级到了电信e家的169套餐。但是因为房子太老了，是没有光纤入户的。小区的电信箱子到我家大概有50米的距离，但是电信装机的师傅表示没有合适的走线通道，比如弱电井一类的，这种情况只能我们自己找人先把光纤拉好。后来纠结了好一段时间，再次投诉到电信之后，有位师傅愿意私人出工帮我们拉线，价格谈到700块。700块还是有点贵啊，机智的我想到了拉邻居入伙，简单沟通后一拍即合，看来天下苦电信久已啊！最终是顺利的以350的价格，通过门前的污水道把光纤拉回了家。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/1.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时候入户光纤应该是有200Mbps的。仍然是房子太老的原因，墙内布线只有百兆，于是二楼以上都卡在了网线质量上。换线肯定是拉不动的，最后不得已选择了拉明线，室内走墙角，室外走污水管。这样2017年底的时候到二楼书房也有了千兆通路，三楼卧室接收二楼的无线信号。二楼次卧到书房用一个无线中继，有客人来的时候插上就好了。2019年三楼的次卧也启用了，不得不再买一个中继器，但是两级的中继效果就非常差了，看视频经常需要缓存，和亲戚视频连线经常卡主。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/2.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;终于到了2020年，主要矛盾还是视频卡顿和三楼信号的问题。在各个论坛研究了数天以后，终于决定采用Tplink的廉价Mesh组网方案。这套Mesh组网在我的家庭网络场景有很大的优势，看我一一道来：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Mesh本身非常的健壮和灵活。能网线的地方采用有线回传，没有网线的也可以无线回传。对老破小没有预埋网线的家庭很友好。易展组网确实很方便，新节点一键就能加入。等换代了，老节点还能在信号覆盖不好的地方发挥余热，很适合大户型的房子。&lt;/li&gt;
  &lt;li&gt;双频合并，路由器会自动根据信号强度切换5G和2.4G。（告别Wu_2.4G和Wu_5G）&lt;/li&gt;
  &lt;li&gt;自动漫游，整个网络只有一个SSID，不用人工去切换信号，漫游衔接的速度也非常快。(告别Wu_1F和Wu_2F)&lt;/li&gt;
  &lt;li&gt;新设备都是1900M总带宽，原来是600M。（旧路由是磊科NW755）&lt;/li&gt;
  &lt;li&gt;APP展示的网络拓扑很清晰，各个子节点，接入设备一览无余。远程也能管理路由器，一个月内就发现了多个蹭网的兄弟。APP上还能管理NAT设置，更是自带DDNS。从原始社会过来的我感觉方便的不要不要的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/4.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一共在PDD购入了1台WDR7661和3台WDR7650，一共460元。和Linsys、Netgear相比简直是无与伦比的性价比，使用体验也尚可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/3.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这次顺便把光猫改了桥接，由主路由7661来拨号。一方面降低光猫的负载，提高通路能力，一方面为后面申请公网IP，提供外网服务做好准备。至此基本上家庭网络的骨干就全部升级完成了，网络设备、网线、接口都满足千兆要求，应该可以用一阵子了。在300M光纤入户的情况下，测试成绩如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;二楼书房台式机有线：下载410Mbps，上传38Mbps。&lt;/li&gt;
  &lt;li&gt;一楼二楼wifi，300Mbps&lt;/li&gt;
  &lt;li&gt;三楼主卧wifi一层Mesh中继，260Mbps&lt;/li&gt;
  &lt;li&gt;三楼次卧wifi二层Mesh中继，140Mbps&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/network-upgrading/5.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;家庭布网小贴士&quot;&gt;家庭布网小贴士&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;家庭组网最好是在装修的时候预埋好足够的网线。我建议是书桌或者电视位两个出口，可以满足一个网络设备一台电视的需求。在高处也可以留一个出口，满足挂顶AP或者智能家居设备的接入。在大门或者屋外预留一个监控口和电源口。&lt;/li&gt;
  &lt;li&gt;现在推广的POE交互机+AC+AP面板的方案，没有用过。网上反馈似乎体验不是很好，但简洁美观应该是有优势的。&lt;/li&gt;
  &lt;li&gt;老房子没有预埋网线的，有Mesh、电力猫、无线中继等选择。体验上Mesh毫无疑问是最好的，价格也从原来的上千元降到了普通百元路由器的水平。有兴趣的同学不妨尝试一下。&lt;/li&gt;
  &lt;li&gt;软路由普通家庭不必纠结，应该是用不上的。但如果入户是200M以上的光纤，光猫改桥接，买个性能强力一些的主路由应该是能提升不少体验的。光猫的WIFI、DHCP都关掉，做好一个光猫的本职工作就好了。&lt;/li&gt;
  &lt;li&gt;最后还有一个神奇的方案，就是家里没有预埋网线，但是每个房间都铺设了同轴电缆的。也有同轴电缆转RJ45的适配器可以选择，据说速率最高能支持到200M呢。现在广电的数字电视服务，其实也是接了一个适配器+机顶盒的，改成适配器转RJ45+电视盒子，也没啥区别。&lt;/li&gt;
&lt;/ol&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/home-network-upgrading-1/&quot;&gt;家庭网络升级路1-骨干网升级&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on July 01, 2020.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[【异常检测】独孤九剑之破刀式——最佳实践]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/anomaly-detection-best-practice/" />
  <id>http://wurui.cc/tech/anomaly-detection-best-practice</id>
  <published>2018-09-20T20:17:20+08:00</published>
  <updated>2018-09-20T20:17:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;上文&lt;a href=&quot;http://wurui.cc/tech/anomaly-detection-unsupervised-learning/&quot;&gt;【异常检测】独孤九剑之破剑式——无监督算法&lt;/a&gt;中，我从异常域和算法域两个维度总结了异常发现的视角和方法。但是只知道这些招法，不免味道寡淡，且有形无神。就像岳灵珊进入思过崖山洞，速成了五岳剑派丢失数十年的许多绝招。在五岳合派大会上横扫了一些三流角色，但戏份和境界也只能止步于此了。那么本文，我会与大家分享我在应用这些异常检测技术时，踩过哪些坑，发现了什么小技巧。希望能给大家一些心法上的提示吧。&lt;/p&gt;

&lt;h2 id=&quot;最佳实践&quot;&gt;最佳实践&lt;/h2&gt;

&lt;h3 id=&quot;偏离多少是异常&quot;&gt;偏离多少是异常&lt;/h3&gt;
&lt;p&gt;处理过相关不平衡数据集的同学肯定有过这个疑问，不平衡变得多大时它应该被认为是一个异常。是应该相对来看吗，一串0构成的序列中插入一个1，偏离度无限，是异常吗？那绝对来看呢，输错密码异一次肯定不会是异常，那几次算呢？&lt;/p&gt;

&lt;p&gt;所以虽然上文在&lt;a href=&quot;http://wurui.cc/tech/anomaly-detection-unsupervised-learning/#5&quot;&gt;如何评价无监督算法&lt;/a&gt;章节中介绍了一些异常分的算法，但任何场景通用的评分函数其实是不存在的。算法给出的统计异常、密度异常都是数学角度的离群点，并不能直接对应到业务异常。所以设计异常分值算法时，一定要紧贴业务，引入业务系数或者阈值。接入新业务时，一般就只需要对这两个参数做适配就可以了。&lt;/p&gt;

&lt;p&gt;除了输出0、1判断和0-1的异常分，还可以考虑使用分段的异常级别。如低危-中危-高危-极危。异常级别相对于异常分数更为直观，也便于在业务规则中使用。&lt;/p&gt;

&lt;h3 id=&quot;如何处理业务变化&quot;&gt;如何处理业务变化&lt;/h3&gt;

&lt;p&gt;常见的业务变化主要有两类。一类是像双十一这样的大促，根据促销时长业务数值会出现区段的整体上升，或者短促的尖峰。同时为了保证业务数据正常流动，很多防护策略会做一定的让步。两方面的原因对数据扰动特别大，但好在大促事件我们都是提前知道的，可以做一些应对。如果有上线策略，那本着业务优先的考虑先降低告警阈值。然后从周期性考虑，可以差分后做年度的周期性模型。短周期模型中，这部分尖峰数据建议去掉，或者对大促单独做模型。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/27.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二类是在某个时间点，新版本上线，业务曲线的区间发生突变。这种时候如果我们使用的是动态基线类的模型，那么即使不管，一段时间业务稳定后，模型也会自动适应，只需忽略掉突变期的误报。如果是非动态模型的，至少需要在业务稳定后，手动触发新模型的训练。&lt;/p&gt;

&lt;h3 id=&quot;异常点合并&quot;&gt;异常点合并&lt;/h3&gt;
&lt;p&gt;有时候，攻击可能是持续发生的，那对应异常在时间上也是持续的。在CEP中会有Contiguity within looping patterns的问题。如A连续登陆失败5次ABCDE，如果规则写的是连续4次及以上为异常，那么不同的规则引擎可能输出不同的结果：（1）ABCD，ABCDE，BCDE （2）ABCD，ABCDE （3）ABCDE。另一种情况，规则要求顺序匹配三个事件ABC，如果实际事件发生为ABBBC，那么不同的规则引擎可能输出：（1）ABC，ABC，ABC （2）ABC，ABC，ABC，ABBC，ABBC，ABBC（3）ABC，ABBC，ABBBC。熟悉CEP的同学知道这里采用了不同的匹配策略：Strict Contiguity，Relaxed Contiguity，Non-Deterministic Relaxed Contiguity等。&lt;/p&gt;

&lt;p&gt;我个人认为，告警应该做到尽量紧密。只要是各个属性相同的告警，在一个时间内的，应该计数合并。持续发生的，应该记录起始时间，在时间轴上持续显示，相应告警级别也要逐渐提升。&lt;/p&gt;

&lt;h3 id=&quot;online的无监督算法&quot;&gt;online的无监督算法&lt;/h3&gt;
&lt;p&gt;离线算法虽然容易实现，但实时场景才是更高的追求。在线算法各方面的优势对业务方有着巨大的吸引力。在线算法实时接收增量数据，并通过增量数据对模型进行调整，而不需要从头训练整个模型，即节省了空间也节省了时间。然而面对海量级的数据流，要保持一个无监督模型是在线的甚至是分布式的是很有挑战的。&lt;/p&gt;

&lt;p&gt;有的模型比较容易改造。比如基于概率分布的，概率后缀树每学习一个新序列，只需要在原来的概率树上更新某条路径上各节点的概率。概率树的模型大小至于序列的多样性有关而与数据的绝对规模无关。基于矩阵分解的个群基线也有在线的版本&lt;a href=&quot;https://papers.nips.cc/paper/5131-online-robust-pca-via-stochastic-optimization&quot;&gt;Online Robust PCA via Stochastic Optimization(NIPS 2013)&lt;/a&gt;。另外矩阵分解也有GPU加速的底层库，真有大规模的应用场景，技术上一般问题不大。&lt;/p&gt;

&lt;p&gt;单次迭代就要依赖所有数据的，online版本肯定会遇到问题。类似KMeans的聚类算法先天就能够支持在线计算，但是复杂度会随着数据规模增加。再看神经网络，从模型上讲使用增量数据二次训练的模型似乎跟用全体数据一次性训练的结果应该一致。但是&lt;a href=&quot;http://caffecn.cn/?/question/63&quot;&gt;实践显示&lt;/a&gt;，二次训练的模型往往达不到一次性训练模型的准确性。Isolation Forest也有&lt;a href=&quot;https://ieeexplore.ieee.org/document/7969205/&quot;&gt;在线版本的论文&lt;/a&gt;，但实践还是比较少。&lt;/p&gt;

&lt;p&gt;最后但凡能够使用滑动窗口的业务模型，都可以做到T+1的mini batch模式。有的模型甚至能够直接输出边界，新的数据做检测时直接比对边界就可以了，而不用通过复杂模型，从而大大增强性能。&lt;/p&gt;

&lt;h3 id=&quot;时序数据处理&quot;&gt;时序数据处理&lt;/h3&gt;

&lt;p&gt;首先需要关注的是周期选择，配合业务特性选择分钟、小时、日，周，月，年。选择长周期时序处理时注意先差分去掉趋势。&lt;/p&gt;

&lt;p&gt;简单时序的话业界有一些开源的算法包，如Netflix的R语言包&lt;a href=&quot;https://github.com/Netflix/Surus&quot;&gt;Surus&lt;/a&gt;，Yahoo的Java包&lt;a href=&quot;https://github.com/yahoo/egads&quot;&gt;EGADS&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/26.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;常见操作是我们需要去拟合输入序列。那不同类型的数据可能适合不同的模型。EGADS中选择AutoForecastModel，程序会自动把所有TMM都跑一遍，并推选偏差值最小的模型送入异常检测模块。这里值得注意的是，自动选取只关注了还原度，但还原度高并不直接代表能更好的查找异常，在使用本方法的时候要留意在心。&lt;/p&gt;

&lt;p&gt;另外模型选择时使用多数投票法，不论在局部或者全局异常发现中，都是非常有效的。&lt;/p&gt;

&lt;h3 id=&quot;密度聚类的特点&quot;&gt;密度聚类的特点&lt;/h3&gt;

&lt;p&gt;密度聚类时可能存在三种情况。如果使用DBScan，那无法聚到类中的游离点是异常，点数较少的类可能是异常。但是如果数据主体是某些PV量较小的接口时，最大的类可能全部都是异常。这又给智能运维提出了很大的挑战，单纯依赖异常检测，黑白都可能会反转。一个非常有效的方法是引入领域知识做二次判断。比如在安全领域，可以引入威胁情报。访问IP是否是高危IP，UA是否是恶意UA，IP、账号是否关联了恶意域名等等。&lt;/p&gt;

&lt;h3 id=&quot;噪音问题&quot;&gt;噪音问题&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/15.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;
数据集中存在系统性或者语义性的噪音是非常正常的。相比噪音，分析者更感兴趣的是异常点。
&lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/24.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;
但噪音与异常点在数据表现上并不容易分开，可以看上图（a），当没有噪音时，我们可以认定A点就是异常点，然而当存在大量噪音时，如上图（b），点A附近有大量分布稀疏的点，当我们收起上帝视角时，你并没有很大把握判定A点就是一个异常点，因为与它相似的点还有很多。在基于密度的聚类中，噪音点会极大的影响质心的位置。在基于统计的模型中，会极大的带偏系统参数。这种两种情况都必须想办法清楚噪音。如果噪音点数量过多，类似于DBScan的方法会直接失效，数据点可能会连成一片。这时候除了手动筛选以外，最直接的方法是降低采样频率，降低整体数据的连接度。&lt;/p&gt;

&lt;h3 id=&quot;工作流的创新&quot;&gt;工作流的创新&lt;/h3&gt;
&lt;p&gt;首先不得不承认，基于无监督的异常检测是非常依赖运营的。那如果能提升运营的效率，也是和集团节能降费提效的工作目标非常契合的。&lt;/p&gt;

&lt;p&gt;传统工作流是将算法异常作为告警提交给运营同学做判断。那显而易见的问题是上下文不完整，误报高，海量告警无法处理。&lt;/p&gt;

&lt;p&gt;好一些的工作流增加了一层数据抽象，即威胁场景。威胁场景描述完整的攻击链条，包含多个通过场景规则关联到一起的告警。一方面将告警浓缩到场景，可以减少两个量级告警数量。另一方便，场景规则有效关联的告警通过相互印证，准确度是非常高的。单点异常来源的告警在这个环节自动被忽略掉了。&lt;/p&gt;

&lt;p&gt;运营的打标数据反馈到模型上，通过半监督算法提升模型准确度。这个虽然是我们强调的闭环的重要构成，但在实际应用中有诸多问题。那取代这个闭环的最新研究成果是无监督聚类-&amp;gt;人工标注-&amp;gt;有监督学习，以实现对已知场景的case by case击破，同时保持对未知异常持续发现的能力。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;那么以上八点就是我在工作中总结出的一些经验技巧了，希望能够帮助到有需要的同学。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/anomaly-detection-best-practice/&quot;&gt;【异常检测】独孤九剑之破刀式——最佳实践&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on September 20, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[【异常检测】独孤九剑之破剑式——无监督算法]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/anomaly-detection-unsupervised-learning/" />
  <id>http://wurui.cc/tech/anomaly-detection-unsupervised-learning</id>
  <published>2018-09-20T18:26:20+08:00</published>
  <updated>2018-09-20T18:26:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;概述&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;异常检测，文章中多见为anomaly detection、outlier detection、deviation detection等。在海量的数据中，总有一些不平常的行为潜藏其中，妄图浑水摸鱼，行不轨之事。异常检测算法就像一把精巧的手术刀，准确刻画正常组织的外缘，将各种异常组织依依剔除出来。总诀：归妹趋无妄，无妄趋同人，同人趋大有。&lt;/p&gt;

&lt;p&gt;异常检测广泛应用于安全且不限于安全，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;反欺诈：如电信诈骗，信用卡盗刷，恶意注册、薅羊毛等&lt;/li&gt;
  &lt;li&gt;入侵检测：外部入侵检测&lt;/li&gt;
  &lt;li&gt;Insider Threat：内部威胁检测，账户异常、数据泄露等&lt;/li&gt;
  &lt;li&gt;工控、IoT安全：通过各种指标发现工业设施，IoT设备网中的异常&lt;/li&gt;
  &lt;li&gt;生态灾难预警：各种自然灾害，极端天气的预警&lt;/li&gt;
  &lt;li&gt;公共健康：禽流感等传染类疾病的提前发现&lt;/li&gt;
  &lt;li&gt;数据去噪：一些机器学习算法对异常点非常敏感，利用异常检测除去噪声通常是数据预处理中很重要的一步。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大部分的异常检测算法都基于两个基本假设：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;异常点是稀疏的&lt;/li&gt;
  &lt;li&gt;异常点与正常点特征不一致&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于两点假设，算法通过对主体数据建立正常点的特征基线，从而分离出少量的偏离基线的异常点。&lt;/p&gt;

&lt;h2 id=&quot;算法分类&quot;&gt;算法分类&lt;/h2&gt;
&lt;p&gt;一般介绍异常检测的文章会从算法本身的分类出发。我却认为首先要从具体的异常场景出发，用业务的视角带入问题，甚至用不同的视角审视同一个问题。一个异常事件，肯定不会孤立发生，往往能从多个源，多个侧面去发现，相关关联，相互印证，得到完善的全面的场景描述。&lt;/p&gt;

&lt;h3 id=&quot;异常域&quot;&gt;异常域&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;数值类异常
    &lt;ul&gt;
      &lt;li&gt;时间序列异常：应用最多的，无须赘述。&lt;/li&gt;
      &lt;li&gt;周期分解：数据运营用的非常多，减掉周期后可检测异常点。&lt;/li&gt;
      &lt;li&gt;历史基线：同一主体，以历史数据建立基线。&lt;/li&gt;
      &lt;li&gt;群体基线：以主体所在的群体数据建立基线，检测离群主体。&lt;/li&gt;
      &lt;li&gt;统计模型：基于数值分布的异常检测，需要先假设数据符合某一种分布模型。&lt;/li&gt;
      &lt;li&gt;游离点检测：在高维特征下，检测游离点。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关联关系类异常
    &lt;ul&gt;
      &lt;li&gt;新的关联关系：分析主体关联到新的实体，如登录新的设备。&lt;/li&gt;
      &lt;li&gt;短时多个关联关系：分析主体在短时间内关联多个实体，如10分钟内登录10台设备。&lt;/li&gt;
      &lt;li&gt;非法的关联关系：分析主体与实体的关联是非法的或者违反逻辑的，如手淘登录来源IP来自数据中心。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;行为序列类异常
    &lt;ul&gt;
      &lt;li&gt;按发生时间构建一个主体的行为序列，建立历史基线。小概率序列认为是异常。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;文本类异常
    &lt;ul&gt;
      &lt;li&gt;凡涉及到文本或字符串的异常，如垃圾邮件检测、webshell检测、xss检测、钓鱼邮件检测。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;图像类异常
    &lt;ul&gt;
      &lt;li&gt;图像中的异常检测。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;网络中的异常
    &lt;ul&gt;
      &lt;li&gt;将网络流量，行为构建为网络后，可以做基于网络的异常检测。常应用在反洗钱、反欺诈、网络安全中。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;地理位置类异常
    &lt;ul&gt;
      &lt;li&gt;移动速度异常：时间临近行为发生的地理位置偏差过大，国外称为land speed violation。&lt;/li&gt;
      &lt;li&gt;地理位置基线：对日常活动范围建立基线。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上异常域每一个都从不同的视角切入。一个异常行为发生以后，让我们有多种不同的方式，不同的能力去检测发现，同时互为印证。无监督学习的业务刻画能力是有限的，基于多视角的检测能够很好的补偿算法本身的局限。&lt;/p&gt;

&lt;h3 id=&quot;算法域&quot;&gt;算法域&lt;/h3&gt;

&lt;p&gt;最全无监督异常检测算法分类在此：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;基于密度的
    &lt;ul&gt;
      &lt;li&gt;KNN、DBScan、KMeans：常见的密度聚类算法，小簇或者游离点为异常。如下图
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/13.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;LOF：根据数据点周围数据的密度来判断此数据是否为异常，所以是基于neighbor density的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于矩阵分解的
    &lt;ul&gt;
      &lt;li&gt;Robust PCA：将输入矩阵M分解为了低秩矩阵L+稀疏矩阵S+噪声N。如下图中输入图像被分解为背景和稀疏的动态人物。RPCA可以广泛应用在时间序列异常、基于基线的异常和基于特征的异常检测中。
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/17.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于神经网络的
    &lt;ul&gt;
      &lt;li&gt;Replicator NN：也就是AutoEncoder，自还原网络。数据特征被压缩在网络参数中，正常数据通过网络可以完美还原，但是异常数据通过网络后不能被还原。
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/19.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;GAN：对抗网络在最近也被应用在视频异常检测中。在没有标记数据的情况下，加入时间维度，通过对抗网络识别出视频中的异常动态。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于分布的
    &lt;ul&gt;
      &lt;li&gt;高斯分布：训练得到期望μ和方差σ^2，再确定阈值ε。
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/20.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;混合模型分布：两个以上混合概率分布。&lt;/li&gt;
      &lt;li&gt;HBOS: Histogram-based Outlier Score，一定程度上依赖空间划分。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于序列的
    &lt;ul&gt;
      &lt;li&gt;HMM：隐马尔科夫模型，训练得到状态转移矩阵，进而计算序列发生的概率。&lt;/li&gt;
      &lt;li&gt;PST：概率后缀树，将行为构建为字符串，进而通过概率后缀树学习子串的发生概率。
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/21.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于树的
    &lt;ul&gt;
      &lt;li&gt;Iforest：其实是基于森林的mass ensemble方法。在异常检测领域独树一帜，随机采样下健壮性也很强，适合高纬度的数据。周老师抓住了一个ground truth，即通过随机的属性和划分点，一些样本很快就到达了叶子节点（即叶子到根的距离d很短），那么它们很有可能是异常点。因为那些路径d比较短的样本，都是距离主要的样本点分布中心比较远的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于图的
    &lt;ul&gt;
      &lt;li&gt;传统子图特征：基于图的点、边数量、出入度信息、n度关联等信息构建特征集，进而检测异常点。&lt;/li&gt;
      &lt;li&gt;Egonet：唯一中心节点(ego)，以及这个节点的邻居(alters)组成的子图。特征如上。&lt;/li&gt;
      &lt;li&gt;network2vector：常见的算法如random walk，通过随机游走构建图的vector embedding。
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/22.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于分类的
    &lt;ul&gt;
      &lt;li&gt;one-class SVM：虽然是分类，但其实是正常点在一边，异常点在另一边。好处是可以用SVM的各种kernel。
  &lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/14.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;基于时序的
    &lt;ul&gt;
      &lt;li&gt;平滑模型：Moving Average Model、Olympic Model&lt;/li&gt;
      &lt;li&gt;回归模型：Regression Models&lt;/li&gt;
      &lt;li&gt;周期分解：seasonal decomposition&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的算法细节不再累述，大家能google到许多文章。&lt;/p&gt;

&lt;h3 id=&quot;应用举例&quot;&gt;应用举例&lt;/h3&gt;
&lt;p&gt;那上文中的两种视角如何结合使用呢？举一个异常登录的场景，黑客H尝试使用社工库破解账户A的密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/25.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结合异常域，我们知道可以从以下方向入手：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数值类：登录的时间是否符合周期、登录的次数、登录失败的次数等是否符合个群基线&lt;/li&gt;
  &lt;li&gt;关联关系：登录的设备对A是否是新设备、登录的设备是否登录了很多不同账户、登录的IP对A是否是新IP、IP是否是黑名单IP&lt;/li&gt;
  &lt;li&gt;行为序列：是否符合登录-&amp;gt;浏览-&amp;gt;下单-&amp;gt;付款等大概率序列。结合人机识别数据，键盘、鼠标操作轨迹是否符合人的行为模型。&lt;/li&gt;
  &lt;li&gt;网络图：将账户A、IP、浏览器特征、设备特征、访问的url、服务等实体构件为图。与所有登录行为一同计算异常。&lt;/li&gt;
  &lt;li&gt;地理位置：登录的位置是否在日常正常范围内（省市区、经纬度距离），与上次记录到的行为做比对，是否符合正常的移动速度。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;然后针对每个可能的异常角度，我们再在算法域中寻找对应能够应用的算法，对应具体业务设置参数和阈值。从而完整的检测登录异常这个场景。&lt;/p&gt;

&lt;h2 id=&quot;如何评价无监督算法&quot;&gt;如何评价无监督算法&lt;/h2&gt;
&lt;p&gt;如何给算法输出的异常打分其实是一个非常头疼的问题，但针对不同模型我们也不失一些标准方法。&lt;/p&gt;

&lt;h3 id=&quot;拉依达准则&quot;&gt;拉依达准则&lt;/h3&gt;
&lt;p&gt;如果整体数据服从一元正态分布，则P(|x-μ |&amp;gt;3σ )&amp;lt;0.003,因此当数据对象值偏离均值3倍方差的时候，就认为该数据对象为异常点。&lt;/p&gt;

&lt;h3 id=&quot;mahalanobis距离&quot;&gt;Mahalanobis距离&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/anomaly_detection/18.svg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;
其中S为二元高斯分布的协方差矩阵，x上横为所有数据对象的均值。Mahalanobis距离越大，数据对象偏离均值越大，也就越异常。&lt;/p&gt;

&lt;h3 id=&quot;聚类评价&quot;&gt;聚类评价&lt;/h3&gt;
&lt;p&gt;在没有标签的情况下，根据聚类本身的特点，每个簇可以计算两个指标。一个是类内点间的平均距离I，一个是与类外点的平均距离O。那么I除以O就可以用于描述聚类结果的内聚度，俗称类内聚合度、类间低耦合。&lt;/p&gt;

&lt;h3 id=&quot;reconstruction-error&quot;&gt;Reconstruction Error&lt;/h3&gt;
&lt;p&gt;重构偏差也可以直接用作异常分。比如RPCA中的sparse矩阵，Replicator NN中还原向量与原始向量的差值。当然分母还要好好设计一下。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;异常检测有非常广的应用领域，从网络安全到人体健康到自然灾害预测。甚至我们的大脑也运行着异常检测的程序。周一看到某个男同事剃了头，和大脑中飘逸发型的基线不匹配了。技术团队outing了发照片，一眼找出其中唯一的程序媛。&lt;/p&gt;

&lt;p&gt;在不同业务场景中可能出现不同的异常域，相应的要用不同特性的算法去检测。最好是利用多种算法的不同视角去共同刻画，得到更准确更全面的结果！&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/anomaly-detection-unsupervised-learning/&quot;&gt;【异常检测】独孤九剑之破剑式——无监督算法&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on September 20, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[那人，那年，那些事儿]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/blog/the-people-the-year-the-story/" />
  <id>http://wurui.cc/blog/the-people-the-year-the-story</id>
  <published>2018-08-08T23:30:46+08:00</published>
  <updated>2018-08-08T23:30:46+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;一&lt;/p&gt;

&lt;p&gt;2014年5月27日，小吴来到哥村刚好21个月。此时国内打车软件激战正酣，百度投资了Uber，腾讯入股滴滴，阿里支持快滴。表面上看是打车之争，实质上是对线下支付，O2O入口的争夺。高潮时期，三家都日均烧钱一个亿来补贴用户，力度之大是过去的互联网从未经历过的。另一边，外卖业务开始冒头，被认为是团购后的下一个爆发点。这时美团、大众点评还未合并，但都相继在外卖领域布局，新贵饿了么线下疯狂扩张配送体系。如果继续走现金补贴的路线，很快也要进入资本战争阶段。&lt;/p&gt;

&lt;p&gt;闪回美国三线城市哥伦比亚，春季学期已经结束，小吴研究生阶段的主要课程已经修完，接下来主要是完成实验和写毕业论文了。5月27日是个重要的日子，通过朋友介绍的机会，小吴终于开始了在美国的第一份兼职工作。雇主Campus Facilities（CF）是学校负责基建和设施维护的一个独立部门。小吴所属的IT团队为CF做内部应用系统开发，支撑管理工单、合同、供应商等。也偶尔会帮助学校HR部门做一些项目，维护或搭建新的人事和工资系统。&lt;/p&gt;

&lt;p&gt;小吴的mentor是个美国人叫Cayle，体型肥硕但是能灵活的坐着办公椅转来转去。桌面上有每日依赖的药物，也有汉堡可乐这样的快餐，喜欢吃各种豆子配玉米薄饼的墨西哥菜。Cayle是团队的技术主力，带着小吴用J2EE + Vaadin来做Java的全栈开发。全校统一购买Oracle的服务，license和服务每年都会花掉学校十几万刀，换来的是书架上每个版本的PL/SQL Programming和偶尔需要的远程电话支持。在这样一个美国中部的小城，Cayle过着典型的中产阶级生活。做着稳定的技术工作，定时上下班。家里住着小别墅，休息时间也在花园里种一些小番茄之类的蔬菜。&lt;/p&gt;

&lt;p&gt;工作时间一开始难以适应，早上7点半上班，下午4点下班，中午半小时午餐时间。小吴每天都要起个大早，骑着借来的自行车纵穿Hitt Street，经过校医院，到达南部停车场附近的办公室，午饭经常是顶着太阳骑车回到学校食堂解决，而后没有太多休息时间，工作到四点再骑车回去，所以晚上的时间往往还很充足。那时候的薪资是13刀/小时，根据美国法律，暑期可以每周工作40小时，开学后就只能每周20小时。时薪在学校内部尚可，对比去餐厅打工的是8刀/小时，但是远远低于硅谷FLAG的实习薪资。第一个月结束小吴在BlueNile上买了一颗小石头送给女友，女友也很是喜欢。后来对比国内柜台，价格也是超值了。&lt;/p&gt;

&lt;p&gt;在CF一直做到12月硕士毕业，8个月的收入支撑了小吴回国前一整年的开销还有剩。开学后的日子也很充实，上午上班，下班做实验写毕业论文。钱包鼓了以后生活也更滋润了。每周去沃尔玛采购一次，水果最爱车厘子和马奶葡萄，十块钱的能吃一周。偶尔煎一块黑盒装的牛眼肉，锅里一滴油都不放，煎好以后休息两分钟，一滴肉汁不流失。餐厅最爱吃chipotle，墨西哥的烤肉卷有肉有饭有蔬菜，口味也喜欢，一顿7块5。外卖最爱吃多米诺的披萨，加鸡翅的套餐13块钱，也是超值。&lt;/p&gt;

&lt;p&gt;北美的校园生活特别容易让人沉醉其中，舒适的环境，不大的课业压力。不少留学生会因为这样那样的原因在学校多待上一年甚至几年。读个minor吧，双硕士也不错，咬咬牙读个博士，甚至单纯因为论文或是找工作的原因延毕。不同的人有不同的人生进度，有时候缓一缓也未尝不好，但关键时候还是要把握自己，走出舒适区，以免有违初心。&lt;/p&gt;

&lt;p&gt;二&lt;/p&gt;

&lt;p&gt;2015年2月21日，小吴第一次来到硅谷。毕业季应聘的过程并不顺利，在毕业舒适区中沉浸了两个月的小吴心态发生了变化。从开始的不慌不忙，到接受Google、亚马逊等大公司相继面试失利后的惨淡现实，着实感受到自己需要一些变化。这按罗永浩的说法，是需要一种艰苦凄惨的环境来磨练自己，烘托背水一战的气氛。所以没有太多准备，小吴带着一套正装就搭上了飞往旧金山的飞机。&lt;/p&gt;

&lt;p&gt;程序员在美国找工作无外乎几件事：1. 找一个大都会落脚 2. 反复的刷题 3. 找人内推&lt;/p&gt;

&lt;p&gt;非常幸运，两天后小吴就在craigslist上找到了一位不错的房东。房子位于圣何塞一个安静的街区，院子里自己搭出来的一间房，没有厕所，但是房东提供了被褥，厨房里的锅碗也可以借用。房东Lucy是珠海人，老家的房子据说和澳门只隔一条马路。Lucy家乡有出海打拼的传统，先来的人站稳脚跟以后就拉帮带，逐渐在加州本地自成一派。Lucy会理发，在圣何塞开了一家美容+理发店。在硅谷这样的地方语言不构成问题，牙医有中国人开的，律所有中国人开的，所有中文服务印成了一本厚厚的中文黄页。Lucy还拉帮带了一个表哥。表哥会装修房子，小吴住的单间就是他在后院里搭出来的，他自己的单间就在对面，Lucy不收他房租。表哥40岁了还没结婚，也没什么积蓄，喜欢唱歌，小房间里放了一套音响，经常放着“为你我用了半年的积蓄，飘洋过海的来看你”。&lt;/p&gt;

&lt;p&gt;题刷的很快，内推也很有效，陆续经历了不少笔试、面试、onsite。在这个过程中隐隐感觉到一些问题。首先是职位，后端开发的职位很多，但大多是应用开发的职位，大数据类的核心研发我基本没有碰到。其次是老印无所不在，下到程序员，上到CEO，无处不卡着你。小吴印象最深的是去面试德勤位于奥兰多的一个研发中心，在休息室等待的candidates除了小吴还有三个老印，面试官还是老印，公司除了高层95%都是印度人，真是让人感受到一种印度恐惧。后来偶然的机会看到国内的招聘机会（刚兴起的拉钩），抱着试一试的心态小吴选投了8家公司的大数据/机器学习岗位。居然每个都快速回复了，有家甚至直接安排第二天在北京SOHO面试。面试节奏很快，最终选定的是一家安全行业的创业公司在成都研发中心的算法岗位。后来多次有朋友问为什么选择创业公司，小吴都回答说其实也没考虑太多，价钱合理，离家近，职位喜欢，还能期望什么更多呢。&lt;/p&gt;

&lt;p&gt;前后在加州只待了一个月，Lucy和表哥待小吴都很好。Lucy好交际，朋友广。经常分享一些朋友农场送来的菜，还免费给小吴剪过头发，一次晚餐上的海石斑和白斩鸡现在都还能回忆起食材的鲜美。走之前听说表哥也要回珠海相亲了，不知道在飞机上听着这首“漂洋过海来看你”的他是什么心境。&lt;/p&gt;

&lt;p&gt;小吴在硅谷期间滴滴、快滴完成了合并，4月份58、赶集宣布合并，11月份美团和大众点评发布联合声明。2015年，O2O市场格局已定，资本寒冬下初创公司死伤惨重，行业巨头纷纷合并。百度推出糯米，阿里打造口碑，京东开启到家，头部公司继续在资本市场投入的同时也在自有业务上发展布局。2015另一个特点就是，三巨头正在不断瓜分天下。各个垂直领域的创业公司在战场上打的头破血流，在接受巨头持续输血的同时也逃避不了逐渐成为巨头生态组成的命运。&lt;/p&gt;

&lt;p&gt;三&lt;/p&gt;

&lt;p&gt;2015年5月5日，青年节的后一天，小吴在成都入职。成都做为一个二线网红城市在IT领域也有一定的产业聚集，一些互联网指数报告中把成都排在北上广深杭之后的第六名。不少大企业考虑到人才和成本优势在成都开设了研发中心。开发出王者荣耀的腾讯天美L1工作室就地处天府三街的腾讯大厦，另一边蚂蚁金服已有上千名员工入驻了天府四街的蚂蚁C空间。在某些细分领域，比如游戏开发，成都有着相当规模的产业集群和历史积淀。但是，缺乏本土独角兽和近年房价的上涨让成都未来的发展有点堪忧。从员工成长的角度，由于远离总部经济和创业中心，职级和薪资的天花板看得见摸得着。从成都最近两年的人才流入流出也能看到新的围城，外漂的游子想回成都过上有生活的日子，往往先要接受降薪；本地的人才想要有更好的发展，就不得不背井离乡，加班加点并且承担更高的生活成本。&lt;/p&gt;

&lt;p&gt;2015年的时候公司还是A轮创业阶段，合着北京的员工一起算，小吴拿到了35的工号。北京office负责做产品和项目，成都刚起步，前期主要由领导带着一起做安全研究，向项目上输出一些算法能力。研究的核心就是应用各种机器学习的方法解决安全问题。比如调研图数据库、算法，把公司采集的流量数据用图的方法构建起来找异常点。又比如做时间序列分析，调研业界开源的各种时序算法，在公司数据集上测试，从关联分析角度做correlation算法，做可视化分析等等。网络安全对小吴来说空白比较多，同步不得不恶补网络安全的基础知识。互联网上的基础架构DNS、ASN、BGP、Whois等；传统的安全设备、认证、厂家、服务；新兴的移动安全、云安全、IoT安全等问题；还有公司产品的核心——安全管理；诸如此类，不一而足。&lt;/p&gt;

&lt;p&gt;公司施行扁平化管理，成都的同事都汇报给一个领导。领导是东南大学少年班毕业的天才少年，因此出道特别早，2004年就加入了趋势科技，离职前是趋势技术级别最高的专家。小吴印象最深的是2017年在北京团建时CEO说过的一句话，“因为Justin就想待在成都，那我就可以为他在成都开一家分公司”，可见领导在公司的分量。领导还是通才，涉猎很广，学习东西又够快够深。给安全研究组指导方向，这是本行，但还能指导算法人员，对各种异常检测技术的优劣也是烂熟于心，用深度学习攒一个异常检测模型，只要半天就能调个不错的结果。做数据可视化方案，2D、3D都可以快速实现验证原型。对大数据前沿技术的发展保持敏感，对核心DAG的优化也有不少实践经验，主导公司大数据实时处理系统的架构。甚至在设计和交互上还能细致的指导，让公司产品的UI、UX提升非常大。&lt;/p&gt;

&lt;p&gt;四&lt;/p&gt;

&lt;p&gt;2016年是人工智能走向主流的元年。AlphaGo击败李世石，宣告破解人类最复杂的游戏。百度推出Level4的无人驾驶，自动驾驶事业部负责人王劲宣布获得加州官方许可的测试牌照。IBM、微软、Facebook纷纷推出人工智能平台，使其生态圈内的开发者进入通用人工智能时代 AI-as-a-Service。&lt;/p&gt;

&lt;p&gt;安全领域，各公司的老总们也开始思考人工智能时代企业所面临的新挑战。从内而言如何应用人工智能、机器学习算法提高自己产品的防护能力、威胁检测能力，降低对专家干预的依赖，减少人工运维的成本。从外部推动来看，企业客户越来越专业，对厂商技术能力、产品成熟度的要求越来越高。更有追逐时尚的客户直接要求厂商具备机器学习算法能力。有的竞标测试中，大数据存储计算，算法检测模型两大能力可以占到50%的技术评分点。&lt;/p&gt;

&lt;p&gt;360在2015年成立了人工智能研究院，由知名机器学习专家颜水成担任研究院长，主要任务是完成人工智能相关方向的原始技术积累和安全领域垂直应用的探索。2017年，360团队在‘人工智能’世界杯ImageNet竞赛中拿下单项第一和团体冠军。全球市场来看，已经有&lt;a href=&quot;http://www.freebuf.com/news/137873.html&quot;&gt;80+的安全公司&lt;/a&gt;引入了人工智能技术进行安全分析。在各种安全峰会上，越来越多的议题和人工智能有关‘人工智能与安全’‘威胁情报与安全智能’‘云计算与大数据安全’等等。2018年的RSA大会，各厂家的展台上更是无AI不安全。&lt;/p&gt;

&lt;p&gt;跟传统安全的攻击与防护不同。小吴所在公司所做的安全管理处理的更多是一条一条的日志，从海量日志中关联、提取威胁事件，提高安全运营的效率。通过大半年的摸索，小吴发现对不同的客户数据可以有一个统一的基本的处理流程，从数据清洗到特征提取，再到几类经典算法的异常检测。这可不就是一个分析师的三板斧么，如果能把这个过程自动化，那以后无论来了谁家的数据，都能快速输出一些结论。顺着这个思路，2016年1月，小吴演示了【 基于profile的用户行为异常检测方法】，这也成为了后来UEBA的理论原型。&lt;/p&gt;

&lt;p&gt;五&lt;/p&gt;

&lt;p&gt;UEBA是User and Entity Behavior Analytics的缩写，意为用户与实体的行为分析。2014年美国咨询公司Gartner的副总裁Avivah Litan提出了UBA的定义，2015年更名为UEBA，2016年入选信息安全十大技术。&lt;/p&gt;

&lt;blockquote&gt;
User and entity behavior analytics offers profiling and anomaly detection based on a range of analytics approaches, usually using a combination of basic analytics methods (e.g., rules that leverage signatures, pattern matching and simple statistics) and advanced analytics (e.g., supervised and unsupervised machine learning). Vendors use packaged analytics to evaluate the activity of users and other entities (hosts, applications, network traffic and data repositories) to discover potential incidents。
&lt;/blockquote&gt;

&lt;p&gt;UEBA收集系统中任何设备和人产生的信息。最优的情况下会从网络设备、系统、应用、数据库和用户处收集海量的行为数据。利用这些数据，UEBA会在各个维度建立动态的基线以确定各种不同情况下的正常状态是什么。UBA最早聚焦在数据窃取、失陷账号、终端安全等内部威胁检测上，而后的UEBA更广泛的应用于了IoT安全、金融反欺诈、业务安全等领域。&lt;/p&gt;

&lt;p&gt;演进到2018年，UEBA的市场也产生了一些变化。首先是UEBA自身的技术逐渐成熟，能够给客户带来的价值日渐清晰和明确。作为一种技术或者方法论，其应用场景逐渐的开拓和延伸，市场上除了少数专业玩家，像SIEM，IAM，EDR、DCAP等领域的厂商也开始广泛使用UEBA的技术，朝着多引擎、多核心、智能化方向演进。在智能化的同时，也给客户带来了困扰，如何自证技术有效性是厂商们普遍需要解决的问题。在应用人工智能的同时，PoC、部署的时间和成本大大增加，既要部署人员梳理复杂的业务，又要数据专家做数据分析。Gartner也针对性的提出了两点建议，一是清楚的定义UEBA要解决的安全场景以及对应输出的内容。二是对一些主要的用户场景，要做到数据源接入和对应分析模型的内置，以降低部署成本。&lt;/p&gt;

&lt;p&gt;从2016年开始至2018年，小吴负责了UEBA从1.0到3.0三个大版本的研发工作。UEBA也从一个孵化项目发展成了公司的核心产品。广泛部署在了多个不同行业的头部企业中，如医药、券商、保险、航空、传统能源国企等。这三年中转变最大的，是小吴的角色定位。在UEBA之前，小吴主要是做机器学习的应用研究，每天日常工作是读最新的论文，处理数据，做验证性测试。研发1.0版本时，小吴做起了Java研发，承担了工作流架构设计的工作。到2.0的时候，UEBA要真正产品化。小吴带起了一个小的研发团队，有算法的同学，有Java同学，有前端同学，还第一次引入了UX。给客户的输出也更专业了，场景列表、客户案例、技术说明、用户手册等整套文档。到了3.0，产品定位和销售模式愈加清晰，研发层面也汇聚了更多资源。UEBA不仅要分布式、实时化，还要支持更多的应用场景，灵活的业务模型定制，复杂的机器学习工作流。小吴的角色重心又转向了产品，对行业的调研，客户价值发现，新功能定义，和UX定设计稿，和公司产品经理讨论数据模型、业务模块整合。作为内部创业项目，除了产品研发层面，对外沟通的工作还占了小吴一半的时间。产品功能、新技术、路线图需要不断的向客户、向销售、向公司内其他团队输出，取得他们的认可。项目上需要帮助梳理需求，审核方案，参与PoC和实施，解决各种问题。时常还要承担公司对外PR任务。到2018年，能够沉下心来做技术做算法的时间越来越少了，这也是小吴后来离开公司的原因之一吧。&lt;/p&gt;

&lt;p&gt;抛开技术细节，在Justin带领下最令小吴受益的是，如何做一个2B的产品。超脱于具体的问题，其基本套路可以抽象成：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;问题调研：新问题还是老问题？如果是老问题，学界有什么研究成果，业界有没有成熟的解决方案，公认的benchmark是什么，可能的提升空间在哪里，对应给客户带来什么价值。如果是新问题，那如何准确的定义问题，近似问题有哪些，有哪些可以迁移的方法，如何评价效果，是否真正对应了客户需求。&lt;/li&gt;
  &lt;li&gt;快速验证：对论文方法、开源代码进行快速复现，验证其benchmark，同时验证该方法在公司数据集上的适应度。对数据库有依赖的，快速收集行业方案，选取公认前五的用公司数据集做benchmark。在此基础上，对创新的方法做验证，看有没有提升。这部分和写论文的流程类似，核心在于快而精，但不求全。&lt;/li&gt;
  &lt;li&gt;价值判断：行业公司有什么方案，甚至什么产品，解决了客户哪部分问题。我们的方案、产品解决客户哪部分问题。我们的侧重点要放在哪里，价值点在哪里，与其他厂商有什么交叉，有什么不同。我们带来的这部分价值，与客气期望的价值是否对应，等等。这些问题都决定着产品是否走在正确的方向。&lt;/li&gt;
  &lt;li&gt;产品化：确定客户价值后，要定义需求优先级，设计ROADMAP，细化PRD，做好研发管理的各个方面。&lt;/li&gt;
  &lt;li&gt;业务方验证：东西做出来了，需要在业务方或者客户那里做beta测试。首先验证有效性，是否解决了客户问题，解决的过程和结果客户是否满意。其次是系统稳定性，易用性，从体验上进行优化。最后是模型的可解释性，泛化能力等。&lt;/li&gt;
  &lt;li&gt;交付：正式版交付前需要将剥离核心层封装起来，接口化，只开放外围业务代码给具体实施的业务方，以降低定制成本、维护成本，同时保证核心模块的安全。&lt;/li&gt;
  &lt;li&gt;迭代：任何产品都需要根据客户反馈进行迭代。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;六&lt;/p&gt;

&lt;p&gt;2018年7月9日，小米公司正式登陆港交所。八年了，当年一起喝下小米粥的13名创业伙伴终于迎来了敲钟的这一天。在手机这个地狱战场上，小米初期毫无硬件经验，却用三年时间就做到了全国第一，之后又用三年半做到了印度第一。在手机的巨大成功下，小米通过自建生态链改变了100多个行业，小米电视到小米手环，从移动电源到平衡车，再次拿下了多个市场第一。小吴是小米的小粉丝，他任务无论小米生态在成长过程中并发了多少问题，‘让每个人都能享受科技的乐趣’这样的愿景仍然是美好的。&lt;/p&gt;

&lt;p&gt;在小米敲钟前一周，小吴迈上了职业生涯的下一个台阶——阿里巴巴。阿里巴巴已经迈过了19个年头，并已经在2014年上市，马云希望阿里能成为员工幸福指数最高的企业，并成为一家“活102年”的企业，横跨三个世纪。阿里集团还拥有庞大的电商帝国，淘宝网、天猫、聚划算、全球速卖通、阿里巴巴国际交易市场、1688、阿里妈妈、阿里云、蚂蚁金服、菜鸟网络，阿里大文娱等，每一个都是垂直领域的一方诸侯。小吴工作的是集团的安全部，为以上这些业务部门做安全防护，保证大家的购物高效、安全。&lt;/p&gt;

&lt;p&gt;放弃家乡的工作，放弃舒适的工作环境，与家人分离，这样的选择需要勇气。但相信阿里巴巴的工作阶段一定能够给小吴的职业生涯带来更大的不同。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/blog/the-people-the-year-the-story/&quot;&gt;那人，那年，那些事儿&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on August 08, 2018.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[车旋元年，木工房の诞生]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/life/woodshop-2017/" />
  <id>http://wurui.cc/life/woodshop-2017</id>
  <published>2017-12-28T11:38:16+08:00</published>
  <updated>2017-12-28T11:38:16+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;一切都源自上半年B站上看到的美国退休建筑师&lt;a href=&quot;https://www.youtube.com/user/urbanTrash/videos&quot;&gt;Frank Howarth&lt;/a&gt;做木工的视频。这位哈弗毕业的大叔退休后住在Portland, Oregon，并在自家院子里建了一个独立的木工房。大叔不仅木工做得好，制作视频的水平更是远超一般的木工YouTuber。磁性的声音，定格动画技巧，gopro的应用，竭尽我空闲的时间，很快把油管上几十个视频都刷了一遍，还每天盼着更新。Frank的作品主要是一些碗，原木纹，拼花纹，每年圣诞节也一定会做一个ornament，让孩子们一起挂到圣诞树上。其余时候也像其他老外一样，改造木工房，做一些实用性的木工，修修补补等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/bowl.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是一激动，我入了一台车床！&lt;/p&gt;

&lt;p&gt;但是木旋是个深坑！车床只是基础投资，接下来还有卡盘，车刀；进阶的有快换卡盘，大平抓，舍弃式车刀，掏空刀，开孔钻头，开孔延长杆，砂盘。数波淘宝操作以后有了下图的配置。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/lathetool.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;入了坑以后再也爬不出来。小木料划不来，大木料得买台带锯来开吧；做点柜子什么的得买台锯才锯的直吧；钻孔手电钻不能保证垂直，台钻来一台；木料截断得斜切锯吧；板材刨平没有压刨怎么行；这么多设备，不能木屑满天飞，集尘来一套。又是数波淘宝咸鱼操作，有了下面的木工房布局。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/woodshop-infinite.gif&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;只买设备没有作品的都是装备党！不能背上这个名声，展示一下今年的主要作品：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/4.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/5.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/6.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【巴花日轮盘】 2017月4月22日&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/9.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【巴花雷神之锤】 2017月6月10日&lt;/p&gt;

&lt;p&gt;巴西花梨是古夷苏木的俗称，不属于传统红木范畴，更不是真花梨。但是遇到好的纹理也甚是漂亮，如果有鬼脸大板做张餐桌更是梦寐以求。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/11.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/12.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【黑柿山水杯】 2017月7月2日&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/7.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/8.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【黑柿茶罐】 2017月10月15日&lt;/p&gt;

&lt;p&gt;黑柿木学名十二雄蕊破布木，色泽随著木纹幻化，纹路曲折变化多端，似不规则山水状纹，深沉、内敛。黑柿木是最近几年才引进的稀有木材，自然山水纹理惊艳了众人，早些时候也是一木难求。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/10.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【黄杨葫芦】 2017月4月30日&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/22.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/23.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【黄杨将军罐】 2017月12月2日&lt;/p&gt;

&lt;p&gt;黄杨木属于常绿小灌木，其材质坚硬细腻，生长极其缓慢，至少要三十年以上树龄者才能作雕刻材料，所以也被称之为“千年矮”。将军罐，是中国陶瓷艺术的珍品。—种罐式，因宝珠顶盖形似将军盔帽而得名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/15.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/16.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/17.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/18.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【大红酸枝茶刀】 2017月10月28日&lt;/p&gt;

&lt;p&gt;大红酸枝交趾黄檀，这就是正经红木啦。茶刀主要是喝普洱茶时使用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/20.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/21.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【老柏木缺口碗】 2017月5月6日&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/13.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/14.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【老柏木水瓶座】 2017月10月29日&lt;/p&gt;

&lt;p&gt;柏木是四川民居建房用的主料。这两件作品都是从一根几十年的拆房老料中诞生的。经常看北美木旋视频的朋友肯定知道，老外特别喜欢用黑胡桃、枫木。黑胡桃木特别漂亮，暗里透金，但是因为全靠进口的原因，价格十分昂贵，都赶上红木了。如果想模仿老外的某些黑胡桃作品，这个原料价格就超标了，更不用说树桩、树瘤这样的大件。所以私以为木旋，尤其是初级木旋，应该着眼于手边易得的本地木材。如四川有老柏木，金丝楠木，北方有渍纹枫木等等，都各有各自的纹理质地。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/1.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/2.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/3.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【风车木碗】 2017月11月25日&lt;/p&gt;

&lt;p&gt;风车木有时候也被称做黑檀，又硬又重。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/24.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/woodshop2017/25.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;【阴沉金丝楠小象】 2017月4月8日&lt;/p&gt;

&lt;p&gt;也就是金丝楠的乌木做的小象手机支架，不多的非木旋作品，阴沉木反而比较轻。&lt;/p&gt;

&lt;p&gt;以上，就是2017年大部分拿得出手的作品了。今年是咱木工房的元年，望来年手艺进步，空闲时间多一点吧，年末实在太忙了！&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/life/woodshop-2017/&quot;&gt;车旋元年，木工房の诞生&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on December 28, 2017.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[基于深度学习的二进制恶意样本检测]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/malware-detection-by-deep-learning/" />
  <id>http://wurui.cc/tech/malware-detection-by-deep-learning</id>
  <published>2017-11-22T11:17:20+08:00</published>
  <updated>2017-11-22T11:17:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;今年7月25日，我所在的公司瀚思科技在北京宣布完成B轮融资一亿元人民币，并且发布了新一代的病毒检测产品DeepSense。Deepsense可以做到沙箱同等水平的高检测率99%，而误报率低于1/1000。&lt;/p&gt;

&lt;p&gt;7月27日，在2017网络生态安全峰会（前阿里安全峰会）人工智能与安全分会场上。我代表瀚思科技第一次披露了Deepsense的技术细节。11月16日，在InfoQ AI前线组织的瀚思安全月第三讲中，我又给大家介绍了最新的一些进展。这次分享有16个群的朋友同步在线收看，下面是分享的图文实录。&lt;/p&gt;

&lt;p&gt;各位晚上好，首先感谢大家参与我的这次主题分享，同时也感谢 InfoQ AI 前线组织这次瀚思科技主题月！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/0.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;瀚思科技成立于2014年，按行业划分我们是一家安全公司。但和大家熟知的卖杀毒软件或者防火墙的传统安全公司不同。瀚思科技帮助各种中大型企业搭建安全大数据的分析平台，平台上应用的安全分析策略深度结合了多种机器学习算法，最终帮助企业定位与揭示各种安全问题。所以我们自己定位是一家安全+大数据+AI的公司。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/1.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在瀚思科技首席科学家万晓川的带领下，瀚思算法部门紧追时下AI领域最前沿的技术突破，并尝试应用在安全领域当中。今天是主题月的第三讲，接下来我会为大家分享我们是如何利用深度学习来做二进制恶意样本检测的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/2.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;agenda如上图所示，考虑我们主要的观众是大数据和AI方向的，我会首先介绍一下病毒检测的技术沿革，各种技术的优劣和取舍。然后我会说明为什么我们认为深度学习可以很好的应用于病毒检测。具体我们是怎么应用深度学习的，用的什么网络，中间有什么技巧。最后是实际操作后，我们得到的一些经验教训，以及下一步的发展规划。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/3.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，我们可以笼统的把病毒检测的各种技术根据两个不同的维度来进行区分。一是根据数据源可以分为基于内容和基于行为两种。二是根据检测方法分为：基于特征码、基于规则、基于算法。&lt;/p&gt;

&lt;p&gt;基于内容的就是一般所谓的静态分析，病毒样本不需要实际执行起来。安全人员直接打开文件查看二进制码或者反汇编后来分析源代码都算静态分析。熟悉安全领域的朋友会注意到这里有个加壳的问题，加壳的样本，尤其是复杂的壳，要做反汇编其实并不容易。内容结合特征码就是传统的病毒引擎的原理，我们日常在都在使用。依赖安全人员给出精准匹配的特征码，匹配迅速，但是就如我们的杀毒引擎一样，需要定期更新病毒库。&lt;/p&gt;

&lt;p&gt;基于行为的就是一般所谓的动态分析，需要在实际或者通过虚拟化的方法把病毒样本执行起来。通过考察样本对操作系统各种资源的操作来构建特征和分析。某些大病毒家族，比如勒索软件，因为操作高调，通过动态分析非常好识别。&lt;/p&gt;

&lt;p&gt;基于规则的方法在静态分析领域用得很少，算是补充。但是在沙箱领域非常常见，因为病毒行为很容易写出规则来。但实际的情况是病毒在沙箱内运行的时间短，最多就是30分钟，往往10分钟都不到，导致其行为暴露不够充分。&lt;/p&gt;

&lt;p&gt;运用分类算法基于行为特征来检测看似不错，但是行为特征少是一个明显的缺陷。所以很多时候往往是混合了动态的和静态的特征来构建。&lt;/p&gt;

&lt;p&gt;运用网络行为加算法来分析就是目前比较火也很有前途的NTA（Network Traffic Analytics）。NTA既融合了传统规则，也结合了机器学习，通过监测网络的流量、连接和对象来识别恶意样本产生的行为。再配合上质量好的威胁情报，能产生高信息熵的特征，特别适合Botnet这一类的病毒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/4.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在历史沿革和普及度上，我们需要知道在业界中，基于特征码（也就是内容特征匹配）的技术仍然占有压倒性优势。统计发现，只要能拿到对应的病毒样本，各大杀毒引擎厂家都能在3小时左右部署特征码。但这个工业流程到达极限以后，厂商在后台拿到新样本的速度很难再提高（APT也难拿到样本），要么是拿到了也处理不过来（新病毒的产生速度一直在提高，有报告统计出每4.2秒就有一个新病毒产生）。一般我们普遍认为，在APT开始大量出现后，特征匹配的方法（流程）到了极限。&lt;/p&gt;

&lt;p&gt;如上图时间轴，考察Virustotal中集成的新引擎，可以看出各个厂商应用内容/行为+算法模式的推进速度。安全厂商普遍使用机器学习算法是从2000年开始的垃圾邮件检测，从最初的简单贝叶斯到04年的SVM。我们安全行业采用算法的速度并不落后于其他行业，衡量标准是安全厂商的数量。而学术界更早就有用算法解决安全问题的文章。前面提到09年后APT兴起，伴随着是沙箱类产品的兴起。2010年第一个GPU版的卷积神经网络出现，在图像识别领域飞速发展，网络变得越来越深，越来越大。到15年，基于深度学习的图像分类识别，其准确度已经超越了人眼。同年，微软开办了第一届恶意软件分类大赛（Microsoft Malware Classification Challenge）。虽然当年拿下第一名的队伍后来被爆出投机取巧了（后面还会讲到细节），但是MS的竞赛让很多厂商学到了实际的样本分类算法应该怎么去做。到16，17年的时候，Virustotal已经集成了诸如CrowdStrike、Invincea、Endgame之类的基于算法的检测引擎了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/5.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们再快速做个对比。基于行为的也好，基于内容的也好，方法本身并无明显的优劣，但是部署场景有着明显的区别。瀚思做的是2B端，所以如果做行为分析，只能依赖于把样本放入沙箱里跑，没法从已经感染了病毒的一个客户实际的电脑上收集到病毒实际的行为。同时现在反沙箱技术实在是过于普及，倚赖沙箱技术会导致病毒检测率的天花板很低。如果做内容分析，又容易被加壳技术干扰。对应非文件类型的样本，如寄存在内存中的木马等无法支持。考虑到瀚思没有终端检测的产品线，加上技术团队做沙箱出身了解其弱点，最终选择了内容+算法的路线。另外2B还有个优势是能看到样本的额外信息（安全设备日志），比如是从那个网站下载的，是哪封邮件的附件，这些可以帮助我们降低误报率。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/6.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二部分我们讲讲为什么深度学习适用于病毒样本分类的问题。&lt;/p&gt;

&lt;p&gt;首先是效果足够好，在图像识别、语音识别、机器翻译等领域的效果都远远超过非深度学习的算法。第二是样本的性质合适，深度学习就是擅长处理单一类型的数据。对应我们的输入都是二进制文件。第三要求足够多的样本，而样本越多准确的也越高。病毒的样本呢，根据Symantec在今年Q2的统计，单日样本可以达到300万。第四，可以避免人工去选择特征，只要一开始就设计好网络结构，深度学习会自动学习到重要的特征。再对比静态分析，比如用N-gram，特征数量会轻松突破百万，再乘以上面的样本数，机器学习是必然选择。&lt;/p&gt;

&lt;p&gt;总得来说，深度学习的优点（超多特征，无需人工特征，样本越多越好）都非常适合二进制病毒样本分类这个领域。目前我们也尝试应用深度学习到其他安全场景中（基于NLP的智能运维），但因为安全系统属于机器学习的下游，一般安全领域不容易直接产生对机器学习新思路突破，经常是借鉴上游的突破（如图像识别），所以还有很多安全领域等待我们去应用新的机器学习算法。&lt;/p&gt;

&lt;p&gt;唯一的缺点就是深度学习目前还相对黑盒，研发人员和客户都还不容易理解，相关人员也不好招聘。&lt;/p&gt;

&lt;p&gt;那么问题来了，我们的输入是文件，深度学习的输入是图像、语言、文字。中间如何转化？选取什么样的网络结构？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/7.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;什么是深度学习？2012年的ImageNet大赛中，Alex Krizhevsky凭借AlexNet一举把分类误差的记录从26%降到了15%，震惊了世界。而AlexNet的核心就是上图中的卷积神经网络。网络的输入是图像，输出是该图像对应的分类。顾名思义，卷积神经网络包含多个卷积池化单元，其中包括了应用卷积核的卷积层，进一步降维的池化层。做完特征检测后，接入全连接层，观察输出特征与哪一分类最为接近。最后通过一个分类器得到分类的结果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/8.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一般笼统的说法，越深的网络就代表更好的分类结果。但目前最新的一些网络模型都参考了resnet的理念，也就是很多个少数层的block组合而成，理念类似ensemble method，看block的构成和block的组合。
对于这个样本分类来说，我们前后换过几个resnet变种，目前部署的模型是基于inception-v4，但目前正在实验densenet，因为同等检测率下，参数更少计算更快。在客户环境下部署，我们希望尽量降低对硬件的需求。从我们实验的效果看，从早的resnet到新的inception-v4，迁移学习后差别只在5%内。所以今后我们研究的重点在速度了，网络选择是第二位。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/9.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之前我们提了一个问题，我们的输入是二进制样本，而卷积神经网络的输入是图像，怎么办？其实这个问题有两层含义，第一，我们需要把二进制样本通过一种方法转换为图像。第二，我们需要借助图像分类的经验甚至是特征模型来帮助我们做病毒的分类。&lt;/p&gt;

&lt;p&gt;那么具体讲解我们的工作流之前，我们先引入一个概念：迁移学习。&lt;/p&gt;

&lt;p&gt;在今年的CCAI上，香港科技大学教授杨强又跟大家分享了什么是深度学习的迁移学习，这里借用他一张ppt。现在我们有两个近似领域A和B，通过深度学习自动提取特征以后，我们发现两个领域在浅层网络中的低级特征其实是可以共享的，而在深层网络中因为领域不同而对应了不同的高级特征。一种普遍的情况是领域A有大量的标记数据，有优良的特征模型已经生成。而领域B数据量比较小。那么通过共享特征，我们可以应用迁移学习将适用于大数据的领域模型A借用过来，再通过领域B的标签数据去训练高级特征和分类，从而在领域B上实现更好的分类效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/10.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以我们的流程如图所示。将正负样本按1：1的比例转换为图像。将ImageNet中训练好的图像分类模型作为迁移学习的输入。在GPU集群中进行训练。我们同时训练了标准模型和压缩模型，对应不同的客户需求（有无GPU环境）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/11.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;流程中比较核心的算法其实在文件到图像的转换。因为常规的网络一般能输入的尺寸也就是300 x 300上下，也就是9K左右的规模。而病毒样本的大小平均接近1M，是远远大于这个尺寸。图像领域的常规转换方法就是缩放，或者用pyramid pooling。这两者我们实验效果都非常低差，AUC在0.6左右。所以后来我们又设计了一个很复杂的pooling算法处理大尺寸文件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/12.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;前面我们介绍过，加壳的样本会对基于内容的分析造成影响。实验中我们发现文件A和B经过加壳后转图像。肉眼看过去，A和B的相识度会比以前更高。就好比PS中马赛克一张猫和一张狗的图片，马赛克强度越高，两图片处理后看起来越相似。但马赛克（加壳）强度低的话，其实处理后的图片和处理前的图片有一定的高纬度映射关系（加壳前后有对应关系）。这种关系，实验看起来深度学习网络能够分辨。当然强度大就无能为力了。
假设算法目前是分辨猫狗照片，不管有没有马赛克。但训练照片中，只有猫照片有马赛克处理，狗没有。所以人工产生狗马赛克图片（人工对样本加壳），让算法有更强分辨能力，至少是对弱马赛克后的图片。&lt;/p&gt;

&lt;p&gt;高强度马赛克的话，算法只能记住高强度马赛克后的特征，只是如果有额外信息，比如图片出现在的邮件正文有猫或者狗的字样，就能辅助我们判断（引入其他信息）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/13.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;流程中提过我们训练了双模型，一个的Inception-V4，一个是Squeezenet。Inception-V4是目前较为先进的模型，有最好的实验结果，训练和inference的速度也可以接受。而Squeezenet是压缩模型，参数数量只有AlexNet的1/50，虽然准确度稍差，但检测速度快很多，专为不能提供GPU环境的客户设计。另外针对这两个模型做迁移学习的时候，我们都替换掉了最顶和最低几层。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/14.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;简单说一下测试结果，AUC可以达到0.985，误报率小于1/1000，检测的速度目前可以达到150M/天。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/15.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;再与各位分享一些经验教训。上面提到检测率和误报率已经同等于沙箱检测的水平。而基于二进制文件的深度学习无需沙箱环境（无需在客户处部署沙箱）。深度学习模型记住的是病毒二进制文件中的有效特征，而不是特征码（特征码由专家选取，对应唯一病毒样本），所以具有更好的通用性。在实际测试中，即使一个月不更新模型，对新衍生的病毒样本也有较高的识别能力。&lt;/p&gt;

&lt;p&gt;测试发现，对不同规模的样本进行测试。更大的数据集，有更高的准确度。这个深度学习本身的性质是一致的。再者不能完全把深度学习当成黑箱，而是需要分析其机制，至少要观察哪些样本的哪些特征比重较大。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/16.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今年5月爆发的WannaCry席卷了全球90多个国家，造成了很恶劣的影响。上图贴出了Virustotal上各家病毒引擎对早期WannaCry样本的扫描结果。我们可以看到，只有CrowdStrike和Endgame两家使用机器学习为核心的病毒引擎能够将其识别为可疑。这也印证了我们所说的泛化能力强。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/17.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外有一个意外发现是，我们的模型对恶意的HTML检测率也很高。但同时对正常的HTML样本有很高的误报率。定位发现原因是训练集的恶意样本中包含很多HTML内容，被深度学习抽取成了特征。优化方法很简单，只需要在正常样本中加入一定的HTML就可以平衡。&lt;/p&gt;

&lt;p&gt;前面提到微软比赛中第一名的方案是有问题的。他的方案是用N-gram产生数万特征，然后用XGboost来做分类。赛后有人发现，微软提供病毒样本时是按病毒分类放在不同路径下，而路径字符是包含在样本中，并被分类器判断成了重要特征。这才使其分类准确度优于其他选手。&lt;/p&gt;

&lt;p&gt;上面两个案例都再次提醒我们，不能把机器学习黑箱化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/18.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下一步，我们还会深入到网络中，继续探索具体的检测机制。我们还会测试其他的样本类型，比如文档类型。目前我们的输出只是一个二元判断，那安全人员可能希望可以进一步给出病毒类型，甚至是家族归属。方案层面，除了目前使用的二进制码转低纬度图片+CNN的方法，我们也在测试另一套方案，考察二进制码在长空间跨度下的特征，并应用LSTM。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/19.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天分享先到这，感谢大家！下周还会有我们瀚思高颜值的大数据架构师为大家分享基于Flink的超大规模实时流应用。想加入我们成都或者南京site做大数据／算法开发的，不要犹豫，直接邮件hr@hansight.com。对机器学习和用户行为分析感兴趣的也欢迎直接来勾搭我。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/malware-detection/20.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;问答环节&lt;/p&gt;

&lt;p&gt;Q1: 在文件加壳加密混肴的情况下，系统如何处理？
答：处理加壳样本的方法我在分享中P12已经直接讲到了。&lt;/p&gt;

&lt;p&gt;Q2: 现在病毒传播很多靠社会工程学，是用户的正常行为，而且病毒也越来越以获利为目的，不搞破坏，重视隐藏。如果病毒使用gfw对抗方的各种流使量无特征方式，检测系统如何应对呢？
答：现在某些病毒，在行为层面隐藏的比较好，基于行为的检测可能不适用了。那么我也讲到了，基于深度学习的这套检测技术，是基于二进制码的，是直接针对内容的。因为病毒的恶意行为总需要通过某些代码触发，我们即可以通过内容来抽取对应特征并识别。&lt;/p&gt;

&lt;p&gt;Q3: 基于深度学习的检测结果的可解释性很低。如果出现了误报，除了whitelist，有没有其他更好的办法？
答：首先我们的误报率是低于千分之一的。另外分享中我提到了，我们可以结合外部信息，比如威胁情报来产生高信息熵的结果。再者因为我们是做2B，对需要二次确认的样本还可以放在我们大数据平台下做前后事件的追溯。&lt;/p&gt;

&lt;p&gt;Q4: 可以详细说一下是如何将二进制文件转换为图像的吗？文件大小不一，是如何处理的？还有就是二进制文件有分段处理吗？
答：我们使用改造后的pooling算法，一次性转换，没有分段。&lt;/p&gt;

&lt;p&gt;Q5: 对于样本label，除了借助第三方如VT扫描结果，有没有其他更好的方法？
答：我们的样本label包括VT和安全部门自己产生的。&lt;/p&gt;

&lt;p&gt;Q6: 您PPT中提到了标准模型和压缩模型，可以详细解释下这两个模型的差异吗
答：简单回答，大的网络参数多，准确度高，但无论是train还是inference的速度都很慢。我们的企业客户很多又没有GPU可以提供。为了提速，我们可以通过剪枝或者选择小网络来训练，只保留几十分之一的参数，缺只损失5%左右的准确度。这也是最近深度学习的一个发展方向。&lt;/p&gt;

&lt;p&gt;Q7: PPT中有提到替换最顶和最低几层，这个又是什么意思呢？具体如何替换的呢？
答：输入层的替换主要是对接我们转换后的样本。输出层的替换主要是分类器我们用了lightGBM。&lt;/p&gt;

&lt;p&gt;Q8:请问您的方法中是不是只能检测已知的恶意文件，泛化能力这一块大体是个什么水平。
答：如上面介绍的，深度学习模型记住的是病毒二进制文件中的有效特征，而不是特征码，所以具有更好的通用性。即使一个月不更新模型，对新衍生的病毒样本也有较高的识别能力。&lt;/p&gt;

&lt;p&gt;Q9:我对这个结果还有点疑惑，理由如下：深度学习本质还是个f(x)，效果好的前提是训练和测试的分布有较强一致性，而迁移学习现在进展缓慢。我之前也做过一段时间安全，安全领域现实数据可以说五花八门，一般训练集几乎无法做到跟真实环境分布一致，基于分类的做法我当时感觉更多是学术价值，当然对于dga这种分布明显的是有效的。
答：我们本身就是基于真实环境中的病毒样本来做训练的。安全团队每月都会拿到千万的最新病毒样本，我们也会持续更新模型。这个最终是会应用到客户环境的，并不是一个纯研究性的课题。&lt;/p&gt;

&lt;p&gt;Q10:请问一下，训练好的模型，可以在移动终端上运行或自行改良吗？也就是不断应对持续升级的病毒样本。
答：我们还没有测试过在移动端上运行。但是模型是会动态更新的。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/malware-detection-by-deep-learning/&quot;&gt;基于深度学习的二进制恶意样本检测&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on November 22, 2017.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Lego Technic GMK 6400 Mobile Crane]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/life/gmk-6400-mobile-crane/" />
  <id>http://wurui.cc/life/gmk-6400-mobile-crane</id>
  <published>2016-12-03T15:30:16+08:00</published>
  <updated>2016-12-03T15:30:16+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;GMK6400是社区玩家合力升级自乐高科技系列42009大吊车而成，可谓是科技男孩儿的梦想之作，是一定程度上的巅峰。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/cg_crane.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;动力和传动系统&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/pf_system.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;边做边改的一些小细节&lt;/p&gt;

&lt;p&gt;原版乐高推杆，简单修改一下，水平大概5度，垂直80度。两边基本接近极限了，没有用三方推杆的情况下基本满意。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/gmk6400-1.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/gmk6400-2.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;伸缩臂的第三级在收回的时候容易被第二级的内部卡住。在末端加滑轮以后基本解决了这个问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/gmk6400-3.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;推杆细节&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/gmk6400-7.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为我有2012-2015年的旗舰，全部杀肉以后分几次补了300rmb左右的散件。&lt;/p&gt;

&lt;p&gt;项目演示+做视频玩儿~&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://player.youku.com/embed/XMTg0NzYxODA2OA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;This MOC is a community project and credits should go to Gerger, Blakbird, AFOL1969, (and others) for the design and the detailed instructions. &lt;a href=&quot;http://www.eurobricks.com/forum/index.php?showtopic=99748&quot;&gt;Refer to the eurobricks thread for this MOC here&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/life/gmk-6400-mobile-crane/&quot;&gt;Lego Technic GMK 6400 Mobile Crane&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on December 03, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Lego Technic 42042RC]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/life/lego-technic-42042rc/" />
  <id>http://wurui.cc/life/lego-technic-42042rc</id>
  <published>2016-10-24T11:18:22+08:00</published>
  <updated>2016-10-24T11:18:22+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Extreme9398之后又复刻了荒川的Buggy3，42037到手后尝试着自己改了遥控，因为都是车所以没有做视频。这次带来的是大型工程机械42042R履带吊车。&lt;/p&gt;

&lt;p&gt;42042需要大量的13单位和15单位梁，拆了42043和42030后勉强够用。红外接收器需要3个，我只有两个，但是有一个sbrick。思路是sbrick驱动履带、驾驶舱和大转盘等底盘部分，一个红外负责吊臂提升和大绞盘。复刻完成后的样子。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/42042.1.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/42042.2.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;爪子还需要自己改成电动。一种方案是L电机驱动mini推杆，然后用50cm延长线接到电池盒。但是我没有50cm延长线，所以直接把小电池盒放在了吊臂上，用第二个红外控制，想必降低了不少载荷。&lt;/p&gt;

&lt;p&gt;一共用了3个L电机+4个M电机实现全RC改造，可以做7个动作：左右履带，转盘360度转动，可抬高驾驶室，吊臂提升，绞轮提升爪子，爪子开合。&lt;/p&gt;

&lt;div class=&quot;embed-responsive embed-responsive-16by9&quot;&gt;
  &lt;iframe class=&quot;embed-responsive-item&quot; width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://player.youku.com/embed/XMTc3MjIyMjgwMA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;第二个imovie作品，又学到了一些功能~~&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/life/lego-technic-42042rc/&quot;&gt;Lego Technic 42042RC&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on October 24, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[春夜喜雨]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/blog/spring-rain/" />
  <id>http://wurui.cc/blog/spring-rain</id>
  <published>2016-02-21T20:30:46+08:00</published>
  <updated>2016-02-21T20:30:46+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/spring_rain.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;猴年的第一场春雨来的有力而急促。正月未过十五，春天已然来了有些时候似的，诧是奇怪的天气。&lt;/p&gt;

&lt;p&gt;而新雨令我喜悦。正是新的一年，振奋的新的一年工作的开始。家里即将添个金猴儿，代步工具托夫人的福得以升级。无不是乐事！&lt;/p&gt;

&lt;p&gt;回忆起一些喜雨的诗句，都是大家熟知的句子，这里再拿出来读一读，也是舒服。&lt;/p&gt;

&lt;h6 id=&quot;春晓-孟浩然&quot;&gt;春晓 孟浩然&lt;/h6&gt;
&lt;p&gt;春眠不觉晓，&lt;/p&gt;

&lt;p&gt;处处闻啼鸟。&lt;/p&gt;

&lt;p&gt;夜来风雨声，&lt;/p&gt;

&lt;p&gt;花落知多少。&lt;/p&gt;

&lt;h6 id=&quot;绝句-志南&quot;&gt;绝句 志南&lt;/h6&gt;
&lt;p&gt;古木阴中系短篷，&lt;/p&gt;

&lt;p&gt;杖藜扶我过桥东。&lt;/p&gt;

&lt;p&gt;沾衣欲湿杏花雨，&lt;/p&gt;

&lt;p&gt;吹面不寒杨柳风。&lt;/p&gt;

&lt;h6 id=&quot;春夜喜雨-杜甫&quot;&gt;春夜喜雨 杜甫&lt;/h6&gt;
&lt;p&gt;好雨知时节，&lt;/p&gt;

&lt;p&gt;当春乃发生。&lt;/p&gt;

&lt;p&gt;随风潜入夜，&lt;/p&gt;

&lt;p&gt;润物细无声。&lt;/p&gt;

&lt;p&gt;野径云俱黑，&lt;/p&gt;

&lt;p&gt;江船火独明。&lt;/p&gt;

&lt;p&gt;晓看红湿处，&lt;/p&gt;

&lt;p&gt;花重锦官城。&lt;/p&gt;

&lt;h6 id=&quot;早春呈水部张十八员外-韩愈&quot;&gt;早春呈水部张十八员外 韩愈&lt;/h6&gt;
&lt;p&gt;天街小雨润如酥，&lt;/p&gt;

&lt;p&gt;草色遥看近却无。&lt;/p&gt;

&lt;p&gt;最是一年春好处，&lt;/p&gt;

&lt;p&gt;绝胜烟柳满皇都。&lt;/p&gt;

&lt;p&gt;这里志南的绝句和杜甫的‘春夜喜雨’皆是描写成都春雨的诗句。成都春秋多是夜里开始下雨，清晨便停了。记得中学时候周末回家，若是夜里开始下雨，我总会坐在窗台上，静静的听雨滴落在树叶，水面的声音，什么都不想，享受这片刻的放松与舒适。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/blog/spring-rain/&quot;&gt;春夜喜雨&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on February 21, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[神经网络风格画 Neural Style Art]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/neural-style/" />
  <id>http://wurui.cc/tech/neural-style</id>
  <published>2015-12-03T11:17:20+08:00</published>
  <updated>2015-12-03T11:17:20+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://arxiv.org/abs/1508.06576&quot;&gt;A Neural Algorithm of Artistic Style&lt;/a&gt;这篇论文说明了如何使用神经网络学习一副画的绘画风格，并把这种风格带入自选照片。&lt;/p&gt;

&lt;p&gt;比如下面这个例子，我们选择文森特·梵高的The Starry Night作为模板。学习过程让梵高灵魂附体我们的电脑，借脑还魂给我们作画。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neural_style_1.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是不是很想试试呢？下面简单说说我在Linux上的运行经验。&lt;/p&gt;

&lt;h3 id=&quot;安装torch&quot;&gt;安装Torch&lt;/h3&gt;

&lt;p&gt;在terminal中运行以下命令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bash 
git clone https://github.com/torch/distro.git ~/torch &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/torch&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ./install.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;第一个命令安装了LuaJIT和Torch需要的依赖。
第二个命令安装了LuaJIT, LuaRocks,然后用LuaRocks安装了torch, nn，paths等.&lt;/p&gt;

&lt;p&gt;脚本也添加了torch PATH到环境中，所以需要重启终端或者运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;有可能需要更新image包到最新&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;luarocks &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;image&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;安装loadcaffe&quot;&gt;安装loadcaffe&lt;/h3&gt;

&lt;p&gt;caffe的依赖比较简单，只需要安装protobuf&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libprotobuf-dev protobuf-compiler&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后安装loadcaffe&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;luarocks &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;loadcaffe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;下载neural-style的实现&quot;&gt;下载Neural Style的实现&lt;/h3&gt;

&lt;p&gt;先移动到你想存放项目的目录下。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Git clone https://github.com/jcjohnson/neural-style.git
sh models/download_models.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Git拷贝实现代码。&lt;/p&gt;

&lt;p&gt;第二行下载训练好的神经网络模型VGG-19和它的改进型，VGG-19为默认设置。&lt;/p&gt;

&lt;p&gt;默认设置运行使用&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;th neural_style.lua &lt;span class=&quot;nt&quot;&gt;-style_image&lt;/span&gt; &amp;lt;image.jpg&amp;gt; &lt;span class=&quot;nt&quot;&gt;-content_image&lt;/span&gt; &amp;lt;image.jpg&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果是公司电脑没有显卡，加上 -gpu -1&lt;/p&gt;

&lt;h3 id=&quot;run-run-run&quot;&gt;Run run run&lt;/h3&gt;

&lt;p&gt;下面是大师为我画的一些作品~~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neural_style_2.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neural_style_3.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neural_style_4.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neural_style_5.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/neural-style/&quot;&gt;神经网络风格画 Neural Style Art&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on December 03, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[紫光檀手镯]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/life/wood-bracelet/" />
  <id>http://wurui.cc/life/wood-bracelet</id>
  <published>2015-11-15T12:14:35+08:00</published>
  <updated>2015-11-15T12:14:35+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/wood_work_5.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;初试木工手工艺，第一个作品，感觉还不错哟，又入一新坑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/wood_work_1.jpg&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;初买来的时候是开好料的木环。对没有电动工具的对新手来说很方便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/wood_work_2.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用锉刀修出手镯的形状。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/wood_work_3.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;锉刀大概修成这样就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/wood_work_4.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用砂纸磨磨磨，从180目开始，240，400，800，1000，到2000目。180目的时候要消除锉刀造成的刀痕，而之后每次递进都是消除之前更粗的砂纸的划痕。这个时候还第一次试着上了蜂蜡，图里可见不是很亮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/wood_work_6.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一周以后电磨到位，用德克士送的硬塑料水瓶中切做了一个夹具，把手镯套上。从低目到高目又重新打磨抛光了一次。网上查到紫光檀不需要上蜡，只要时不时用细布把玩就可以了。1个月左右产生漂亮的包浆。&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/life/wood-bracelet/&quot;&gt;紫光檀手镯&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on November 15, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[橡皮章DIY]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/life/eraser-print/" />
  <id>http://wurui.cc/life/eraser-print</id>
  <published>2015-11-03T21:40:32+08:00</published>
  <updated>2015-11-03T21:40:32+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;橡皮章，简单的手工。&lt;/p&gt;

&lt;p&gt;玩了一个月，感觉第一阶段已经过去了。记录一下历程，展示一下拙作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/eraser_1.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;“平安”&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;第一个章居然选了刻字，真是有点自不量力。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/eraser_2.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;接着二号三号选了花型，练习曲线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/eraser_3.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;“年年有余”&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;传统图案。印的不是很好，但是红黑配很有味道。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/eraser_4.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;“吴睿私印” “机密” “皮卡丘”&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;私印设计哪家强？元代大书法家同名好。。。另外字母刻的不好。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/eraser_5.JPG&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;乱乱的大集合~~&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/life/eraser-print/&quot;&gt;橡皮章DIY&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on November 03, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[小游戏1024自动机与AI]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/1024-autoplayer/" />
  <id>http://wurui.cc/tech/1024-autoplayer</id>
  <published>2015-10-18T14:59:10+08:00</published>
  <updated>2015-10-18T14:59:10+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;之前看到&lt;a href=&quot;http://c4fun.cn/&quot;&gt;Coding 4 Fun&lt;/a&gt;的博客，使用&lt;a href=&quot;http://c4fun.cn/blog/2013/11/22/auto-aixiaochu-app/&quot;&gt;Qt+BlueStack实现自动天天爱消除&lt;/a&gt;。哇塞，好牛逼！写程序来开挂，这么高科技的玩法勾的我跃跃欲试了。&lt;/p&gt;

&lt;p&gt;考察一下技术方案，原文提到的Qt+BlueStack我都没有接触过，还是首选Python来的比较快。游戏选择另外一款曾经火热过的小游戏&lt;a href=&quot;http://1024game.org/&quot;&gt;1024&lt;/a&gt;。其实早在1024还火的时期，就有人做出了直接写在JS中的AI来自动玩游戏并获得高分。但是这里我希望也是做成基于图形识别的自动机框架。这样以后遇到别的游戏，图形识别和控制指令部分也能借用相同的代码。&lt;/p&gt;

&lt;h3 id=&quot;第一步-图形抓取&quot;&gt;第一步 图形抓取&lt;/h3&gt;
&lt;p&gt;搜索一番发现可以使用Pillow的ImageGrab。但是Windows使用正常，mac却需要使用一个修改过的版本，&lt;a href=&quot;https://github.com/colin1990324/1024-AI/blob/master/ImageGrab.py&quot;&gt;下载&lt;/a&gt;以后直接导入。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ImageGrab&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# initial graphic settings
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1055&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1545&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WIDTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;214&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;INTERVAL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# position checking
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGrab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# get origin_x, origin_y
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOrigin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'origin ='&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;origin_y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/1024-board1.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在屏幕上合适的位置取一个区域BOX，作为每次取屏的区域。这里不用特别准确，保证游戏区都在其中就可以了。getOrigin方法取得游戏区的准确位置，帮助校准，后面定位每个块的位置就方便了。我提前测量了游戏区域的尺寸数据，得知每个块的边长大概是214px，块间距是28px。&lt;/p&gt;

&lt;h3 id=&quot;第二步-数字识别&quot;&gt;第二步 数字识别&lt;/h3&gt;
&lt;p&gt;获得图形以后怎么识别里面的数字呢。简单想想，事先把1，2，4等的对应图形都存起来。识别的时候只需要一一比对就可以了。&lt;/p&gt;

&lt;p&gt;但是实力不济，1024以后的图形就没法获得了。。。再观察发现貌似新出的块只可能是1，2，4。如果自己维护一个棋盘，每一步之后的状态自己计算，那就只需要识别随机出现的新块在哪个位置，数字是1还是2还是4就可以了。&lt;/p&gt;

&lt;p&gt;但是眼残，貌似之前测量的有误差，实验的时候发现取的块不能完全重合，也就是不能用像素值全等来判断异同。。。估计有一两个像素的误差，想来也是人之常情。。。特别是图形特别复杂的时候，难以获得准备定位。第一考虑是用图形匹配算法，比如OpenCV的cv2.matchTemplate()。但是之前没有用过，不知道开销如何，我这里的问题实质又非常简单，无非是偏移了一点点位置。后来做了个实验，简单的把2D图形拉成1D链表，然后两个链表做PearsonCorrelation。结果效果非常好，阳性值都是0.99，阴性值0.3的样子。再后来为了提高速度，只取块中间50*50的区域，识别这几个简单图形仍然又快又好。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/1024-board2.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第三步-模拟游戏&quot;&gt;第三步 模拟游戏&lt;/h3&gt;

&lt;p&gt;既然是自动机，我们需要自己维护一个游戏模型。棋盘用一个4*4的矩阵就可以表达。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# initial board
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;im_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;游戏允许做上下左右四种操作，所有的块都会按照方向移动到底，相同数字的块合并。编码的时候我只实现了moveLeft，而其他三种操控可以通过矩阵旋转和moveLeft来间接实现。比如moveUp,我们只需要逆时针旋转90度，做moveLeft，再旋转270即可。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveRight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fliplr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fliplr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rot90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rot90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;moveDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rot90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moveLeft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rot90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;玩家完成一次操作之后会随机在空位生成一个新块，这时候我们在棋盘对应为0的所有位置进行识别，找到新块，并赋值在我们的矩阵中。&lt;/p&gt;

&lt;p&gt;Gamve Over的判定：&lt;/p&gt;

&lt;p&gt;获取新块之后，如果棋盘中没有0，则可以进行胜负判定。如果所有块的四个相邻块都不能与其合并，则判定游戏结束。&lt;/p&gt;

&lt;h3 id=&quot;第四步-ai算法&quot;&gt;第四步 AI算法&lt;/h3&gt;

&lt;p&gt;有了一套游戏机制以后可以考虑如何做AI来获取高分了。对抗游戏常用的MiniMax Algorithm这里并不适用。那就先试试普通的DFS。每一步都让程序去试试，每一步的每下一步也让程序去试试。如果试5步，就是对5步以后的4的5次方1024种不同结果进行了评估。评估就是给结果打打分，一般叫score function，优化问题中叫heuristic funciton。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastBoard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rst&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里有几个简单的考虑，一是空块越多越好（鼓励优先合并），二是最大块越大越好（毕竟想突破1024，2048嘛），三是相邻块的差越小越好（这样以后相邻块有更大合并的可能）。最后算出来的得分越高，就越是我们希望得到的结果。&lt;/p&gt;

&lt;p&gt;但是游戏中还有一大变数，使得这个理想算法不一定那么管用。每一步以后，会随机产生一个新块。而这个变量大大增加了计算的复杂度。尤其在游戏初期，每一步以后就不只是4种可能，而是数十种可能，如果要基于概率来算分，DFS这样的就不用考虑了。。。最后实际中，为了方便快捷（懒），我选择了只考虑一步。。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/colin1990324/1024-AI/blob/master/1024AI.ipynb&quot;&gt;在notebook的最后&lt;/a&gt;，我给出了virtual game的运行代码。&lt;/p&gt;

&lt;h3 id=&quot;第五步-与游戏交互&quot;&gt;第五步 与游戏交互&lt;/h3&gt;

&lt;p&gt;AI帮忙算出了每一步走哪个方向好，我们要把这个决定用指令发送给游戏。&lt;/p&gt;

&lt;p&gt;Windows下用ctypes.windll.user32.SendInput很简单，mac上又麻烦了一些。首先搜到的居然是让我用PyObjC调用ObjC来生成按键事件。。。太绕了，打死不从，我们按键的频率又不高。后来找到了用Apple Script的方法，简单直观了不少。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pressKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'osascript -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tell application &quot;System Events&quot; to key code 123&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'osascript -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tell application &quot;System Events&quot; to key code 124&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'osascript -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tell application &quot;System Events&quot; to key code 126&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;down&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'osascript -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tell application &quot;System Events&quot; to key code 125&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;第六步-测试&quot;&gt;第六步 测试&lt;/h3&gt;

&lt;p&gt;终于完成了整个流程，摆好浏览器的位置，$python 1024.py，我们来跑一跑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/1024.gif&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;流泪！！！毕竟亲生的，有点bug也懒得搞了。。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/colin1990324/1024-AI&quot;&gt;github地址&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/1024-autoplayer/&quot;&gt;小游戏1024自动机与AI&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on October 18, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[分离无连接子图]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/isolate-disconnected-subgraph/" />
  <id>http://wurui.cc/tech/isolate-disconnected-subgraph</id>
  <published>2015-09-29T17:34:31+08:00</published>
  <updated>2015-09-29T17:34:31+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;实践中经常遇到这样一个小问题。有一套图数据，所有节点间并不是全部连通的（任意点间均有通路）。这必然导致出现相互隔离的子图，这时我们可能希望将所有分离的子图找出来，单独处理。这里给出解决这个问题的一小段程序。&lt;/p&gt;

&lt;p&gt;The problem is, given a set of edges(node, node), seperate all subgraphs that are isolated from each other. Isolation of two graphs Gx and Gy is defined as every node Xi in Gx has no edge(or path) to every node Yi in Gy.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# expect output 2 subgraph of {1,2,3,4} and {5,6,7}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;naive idea, construct a set of nodes of a subgraph, a new node is added to the set if it can connect to any node in the set&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSubgraphs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSubgraphs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# this edge should connect two subgraph
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSubgraphs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Not as expected, something must be wrong!&lt;/p&gt;

&lt;p&gt;Later added edges may connect preview added sets together, check every pair of sets to see if they have any intersection&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;combineSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;iterate to combine sets till length of list don’t change&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combineSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rstList&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you are familiar with Leetcode, you may feel like it is a real world practice of &lt;a href=&quot;https://leetcode.com/problems/merge-intervals/&quot;&gt;Merge Intervals&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/isolate-disconnected-subgraph/&quot;&gt;分离无连接子图&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on September 29, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[图数据库系列(一) 初见Neo4j]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/neo4j-first-sight/" />
  <id>http://wurui.cc/tech/neo4j-first-sight</id>
  <published>2015-09-04T11:08:32+08:00</published>
  <updated>2015-09-04T11:08:32+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;h2 id=&quot;neo4j简介&quot;&gt;Neo4j简介&lt;/h2&gt;

&lt;p&gt;Neo4j是一个高性能的图数据库，属于NOSQL数据库中的一类。数据以图的形式存储而不是传统的表结构存储。Neo4j也可以被看作是一个高性能的图引擎，该引擎具有成熟数据库的所有特性，以及单机存储10亿级数据的能力。程序员工作在一个面向对象的、灵活的网络结构下而不是严格、静态的表中.&lt;/p&gt;

&lt;p&gt;Neo4j因其嵌入式、高性能、轻量级等优势，越来越受到关注。&lt;/p&gt;

&lt;h2 id=&quot;图形数据结构&quot;&gt;图形数据结构&lt;/h2&gt;

&lt;p&gt;在一个图中包含两种基本的数据类型：Nodes（节点） 和 Relationships（关系）。Nodes 和 Relationships 包含key/value形式的属性。Nodes通过Relationships所定义的关系相连起来，形成关系型网络结构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neo4j_graph.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装&quot;&gt;安装&lt;/h2&gt;

&lt;p&gt;Neo4j可以被安装成一个独立运行的服务端程序，客户端程序通过RESTful API进行访问，也可以通过浏览器Console运行Cypher语句。另外Neo4j支持嵌入式安装，即安装为编程语言的第三方类库，目前只支持java和python语言。同时Neo4j也可以同Gephi结合，成为其插件式数据库源。&lt;/p&gt;

&lt;p&gt;因Neo4j是用java语言开发的，所以确保将要安装的机器上已安装了jre或者jdk。&lt;/p&gt;

&lt;p&gt;具体教程参见&lt;a href=&quot;http://www.cnblogs.com/ljhero/archive/2012/05/13/2498039.html&quot;&gt;LjHero&lt;/a&gt;的这篇博文，本文不再累述。&lt;/p&gt;

&lt;h2 id=&quot;cypher简介&quot;&gt;Cypher简介&lt;/h2&gt;

&lt;p&gt;Cypher是一个描述性的图形查询语言，允许不必编写图形结构的遍历代码对图形存储有表现力和效率的查询。Cyper通过一系列不同的方法和建立于确定的实践为表达查询而激发的。许多关键字如like和order by是受SQL的启发。模式匹配的表达式来自于SPARQL。正则表达式匹配实现实用Scala。Cypher是一个申明式的语言。对比命令式语言如Java和脚本语言如Gremlin和JRuby，它的焦点在于从图中如何找回（what to retrieve），而不是怎么去做。这使得在不对用户公布的实现细节里关心的是怎么优化查询。&lt;/p&gt;

&lt;p&gt;这个查询语言包含以下几个明显的部分：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MATCH：图形的匹配模式，束缚于开始点。&lt;/li&gt;
  &lt;li&gt;WHERE：过滤条件。&lt;/li&gt;
  &lt;li&gt;RETURN：返回所需要的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;实战演示&quot;&gt;实战演示&lt;/h2&gt;

&lt;p&gt;本场实战，我选取了一个邮件头（Email Header）数据集。希望通过构造图数据库，能将邮件的流向关系清晰的展示出来。&lt;/p&gt;

&lt;h3 id=&quot;数据预处理&quot;&gt;数据预处理&lt;/h3&gt;

&lt;p&gt;原始数据&lt;a href=&quot;https://github.com/colin1990324/Neo4j_EmailHeader/blob/master/data/email%20headers.csv&quot;&gt;email_headers.csv&lt;/a&gt;包含了1170封邮件的数据头部分。数据有四列：From, To, Date, Subject。即发件人，收件人（复数），时间，主题。&lt;/p&gt;

&lt;p&gt;经过数据预处理，我将源数据分解为了三个文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/colin1990324/Neo4j_EmailHeader/blob/master/data/addresses.csv&quot;&gt;addresses.csv&lt;/a&gt;:  所有不同的邮件地址，同时加上id。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/colin1990324/Neo4j_EmailHeader/blob/master/data/emails.csv&quot;&gt;emails.csv&lt;/a&gt;:所有不同的邮件，以及发送时间和主题。加上id。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/colin1990324/Neo4j_EmailHeader/blob/master/data/relations.csv&quot;&gt;relations.csv&lt;/a&gt;:所有的发送，接受邮件关系。包含Email_id，From_id，To_id。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过预处理，源数据清晰的分解为了图数据的两个组成部分：节点（邮件地址、邮件），关系（发送、接收关系）。&lt;/p&gt;

&lt;p&gt;接下来我们启动Neo4j server，打开浏览器Console（默认端口7474），开始使用Cypher加载数据。&lt;/p&gt;

&lt;h3 id=&quot;清除所有节点和关系&quot;&gt;清除所有节点和关系&lt;/h3&gt;
&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;OPTIONAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;DELETE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;加载邮件地址生成person节点&quot;&gt;加载邮件地址，生成Person节点&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;LOAD CSV是Cypher支持的从CSV文件载入数据的方式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HEADERS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file:///home/colin/Downloads/data/addresses.csv&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine.id&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;email:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvLine.address&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Return 55 nodes.&lt;/p&gt;

&lt;h3 id=&quot;加载邮件节点&quot;&gt;加载邮件节点。&lt;/h3&gt;
&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HEADERS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file:///home/colin/Downloads/data/emails.csv&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;e:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine.id&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;time:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvLine.time&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;content:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvLine.content&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Return 1170 nodes.&lt;/p&gt;

&lt;h3 id=&quot;创建索引&quot;&gt;创建索引&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;加载关系时需要大量匹配节点。创建节点索引，提升效率。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ON:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ON:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;加载发送接收关系&quot;&gt;加载发送、接收关系&lt;/h3&gt;
&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用LOAD CSV命令加载大量数据时，可能因为内存限制而失败，产生OutOfMemoryError。这时使用USING PERIODIC COMMIT来分段加载数据。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加载关系时，通过MATCH找到对应id的节点，然后创建关系：（节点）-[关系]-（节点）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每封邮件只有一个发件人，用CREATE UNIQUE创建唯一的关系。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;USING&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PERIODIC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;COMMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;CSV&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;HEADERS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file:///home/colin/Downloads/data/relations.csv&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvLine&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p1:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine.fromId&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)}),(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;e:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine.emailId&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)}),(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvLine.toId&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:FROM&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:TO&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Created 10233 relationships, statement executed in 4567 ms.&lt;/p&gt;

&lt;p&gt;加载完成，让我们来试验一下查询语句。&lt;/p&gt;

&lt;h3 id=&quot;查询所有发件人id1收件人id2的邮件&quot;&gt;查询所有：发件人id=1，收件人id=2的邮件&lt;/h3&gt;
&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p1:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r1:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;e:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1.id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2.id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neo4j1.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Displaying 35 nodes, 98 relationships.&lt;/p&gt;

&lt;p&gt;这里返回了对应节点和关系。我们发现有的邮件收件人也包含了发件人，这个关系并不是很有意义。&lt;/p&gt;

&lt;h3 id=&quot;查找所有收件人包含发件人的情况删除这个环形关系&quot;&gt;查找所有收件人包含发件人的情况，删除这个环形关系。&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p1:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r1:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;e:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p1:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neo4j2.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Displaying 35 nodes, 66 relationships.&lt;/p&gt;

&lt;p&gt;Cypher也支持对属性进行模糊查询。&lt;/p&gt;

&lt;h3 id=&quot;通过时间戳来筛选邮件&quot;&gt;通过时间戳来筛选邮件&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;注意，Neo4j没有内部支持的时间类型，这里我们需要使用正则表达式。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p1:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r1:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;e:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;p2:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1.id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2.id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e.time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'^1/16/2014.*'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neo4j3.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Displaying 7 nodes, 10 relationships.&lt;/p&gt;

&lt;p&gt;使用图数据库，我们可以轻易的解决较为复杂的路径问题。&lt;/p&gt;

&lt;h3 id=&quot;查询所有从a地址到b地址的路径&quot;&gt;查询所有从A地址到B地址的路径&lt;/h3&gt;
&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:Person&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;:Person&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neo4j4.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过COUNT可以做聚合操作。&lt;/p&gt;

&lt;h3 id=&quot;查询收件人最多的邮件出度最高&quot;&gt;查询收件人最多的邮件（出度最高）&lt;/h3&gt;
&lt;hr /&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cypher&quot; data-lang=&quot;cypher&quot;&gt;&lt;span class=&quot;k&quot;&gt;MATCH&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;n:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TO&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RETURN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiverNumber&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;COUNT&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/neo4j5.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;结果显示这些邮件都是发送给所有人的邮件。&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;通过本次实战，我们实践了：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用LOAD CSV加载CSV格式数据&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用USING PERIODIC COMMIT分段加载&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MATCH来进行匹配查询&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CREATE来创建节点和关系&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CREATE INDEX ON来创建索引&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;RETURN返回语句&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DELETE删除语句&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用正则表达式~匹配属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查询路径&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;COUNT聚合操作&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过此文，希望你以及对Neo4j有了一个感性的认识，对Cypher语句有了初步的理解。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/colin1990324/Neo4j_EmailHeader&quot;&gt;Github项目地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vacommunity.org/VAST+Challenge+2014&quot;&gt;数据源 VAST2014 Challenge&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/neo4j-first-sight/&quot;&gt;图数据库系列(一) 初见Neo4j&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on September 04, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[时间序列异常检测]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/time-series-anomaly-detection/" />
  <id>http://wurui.cc/tech/time-series-anomaly-detection</id>
  <published>2015-07-30T16:26:32+08:00</published>
  <updated>2015-07-30T16:26:32+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;本文总结了我在时间序列异常算法方面的一些经验。读者需要对常规机械学习算法有一定的了解。希望本文能帮助有相关需求的工程师快速切入。&lt;/p&gt;

&lt;h2 id=&quot;egads-java-library&quot;&gt;EGADS Java Library&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yahoo/egads&quot;&gt;EGADS (Extendible Generic Anomaly Detection System)&lt;/a&gt;是Yahoo一个开源的大规模时间序列异常检测项目。它的框架主要由两个模块构成，一个是时间序列构造模块，另一个是异常检测模块。给定一段时间的离散值（构成一个序列），时间序列模块会学习这段序列的特征，并试图重新构建一个和原序列尽量接近的序列。结果和原序列一同送入异常检测模块，基于不同的算法（原则，阈值），异常点会被标记出来。&lt;/p&gt;

&lt;h3 id=&quot;time-series-modeling-module&quot;&gt;Time-series Modeling Module&lt;/h3&gt;
&lt;p&gt;时间序列构造模块提供了多种算法。简单介绍如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Olympic Model（Seasonal Naive）一个简单的窗口模型，对点Px的预测为点Px前n个值的Smoothed Average.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Exponential Smoothing Model 一个平滑模型，由简单的数列获得。ETS模型可以自动选择Single、Double、Triple里面匹配最好的输出。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Moving Average Model 也是平滑模型，点Px的预测值取邻近点的平均值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Regression Models 一般是线性回归，特殊例子或者异常偏差特别大的时候有用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;anomaly-detection-module&quot;&gt;Anomaly Detection Module&lt;/h3&gt;
&lt;p&gt;异常检测模块&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;ExtremeLowDensityModel 超低密度模型，很简单有效的密度模型。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;AdaptiveKernelDensityChangePointDetector 拐点检测模型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;KSigmaModel 经典K-sigma模型&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DBScanModel（Density-Based Spatial Clustering of Applications with Noise）又是一个基于密度的模型，在空间中作聚类，如果目标序列可以比较好的分类的话会有不错的效果。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实践经验&quot;&gt;实践经验&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;序列构造自动选优&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不同类型的数据可能适合不同的模型。选择AutoForecastModel，程序会自动把所有TMM都跑一遍，并推选偏差值最小的模型送入异常检测模块。值得注意的是，这里自动选取的标准只关注了还原度，但还原度高并不直接代表能更好的查找异常，在使用本方法的时候要留意在心。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;多数投票算法&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不同的异常检测算法从不同的角度定义了异常。实践过程中我发现，单一异常算法并不能找出所有异常点，同时还会出现一系列的假阳性异常。使用Majority Voting，规定半数以上算法识别为异常的点才输出为结果，在实际数据中提供了远高于单一算法的准确度。&lt;/p&gt;

&lt;h2 id=&quot;surus&quot;&gt;Surus&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/Surus&quot;&gt;Surus&lt;/a&gt;是Netflix开源的一个项目，因为Netflix内部大量使用Pig和Hive，Surus主要的功能是提供RPCA的Pig/Hive封装。核心算法Robust PCA是Java实现的，可以单独调用。&lt;/p&gt;

&lt;p&gt;Netflix首先对他们的问题定了一个基调。Profile是一个非常好的习惯，对决策者来说可以提供命中率，也就提高了团队效率。问题的特征定义如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;高纬度。数据集纬度高，数据间相互交织，人工检测基本不可能。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最低加阳性。作为异常检测问题，我们不希望有过多的假阳性报警来干扰监控人员。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;周期性。每小时/每天/每周/每月这样的周期性数据如果不妥善处理，某些周期性的行为可能误报为异常。实际数据中，每天固定时段的峰值数据相对于大部分采样点都可能被判定为异常，但实际为周期性正常现象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;数据并不是均匀分布的。像Netflix在两年中实现了高增长，算法需要足够健壮来处理非均匀分布的数据集(增长性数据是一个普遍现象，如长期来看的股市指数等)。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;算法细节&quot;&gt;算法细节&lt;/h3&gt;

&lt;p&gt;Robust PCA是一个非常常见的主要成分提取算法。RPCA本质其实是一个矩阵分解算法。目标是将输入X分解为X=L+S+E。L代表了X的low rank approximation（低秩估计）。而低秩估计本质就是将矩阵中相关性强的行投影到更低维的线性空间，实现了一个降维平滑的功能，同时剔除了冗余信息，提取了矩阵特征。提取完主要成分L后，获得了剩下的稀疏矩阵S，和噪点E。&lt;/p&gt;

&lt;p&gt;这里做异常检测的时候简单认为低秩矩阵L就能大部分还原输入序列。异常点的特征应该就表现在S或者E中。实际应用中可以把RPCA作为一个时间序列构造模型添加入EGADS中，用后者的异常检测模块提取异常。&lt;/p&gt;

&lt;h2 id=&quot;isolation-forest&quot;&gt;Isolation Forest&lt;/h2&gt;

&lt;p&gt;上面两个项目使用了若干种类的异常检测算法。如基于模型的（统计模型，线性模型）；基于距离的（K临近等聚类算法）；基于密度模型的（Extreme Low Density Model）。隔离森林（Isolation Forest）跟他们都有比较明显的区别。&lt;a href=&quot;http://cs.nju.edu.cn/zhouzh/zhouzh.files/publication/icdm08b.pdf?q=isolation-forest&quot;&gt;论文&lt;/a&gt; &lt;a href=&quot;http://sourceforge.net/projects/iforest/?source=navbar&quot;&gt;代码&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在训练阶段，小样本抽样更利于获得优质的分类结果。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为不用计算点与点直接的距离，计算时间大大优于各种基于距离的算法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同样因为小样本抽样后迭代，时间、空间复杂度都可以维持在相当低的水平。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于上一点，iForest有能力处理超高维，超大规模的数据。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;iForest适用场景需要符合两个要求：1. 异常点非常少 2. 异常点的某些属性要跟正常点非常不同。&lt;/p&gt;

&lt;p&gt;iForest是基于随机森林的算法。对异常的分类能力基于两个假设：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;数据集中少数的异常点会形成少量的聚类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;异常点具有明显不同的属性，使他们很快在分类中被区分出来。正常点很难被分类，而存在于树的更深层。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/iforest_depth_converge.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图横坐标表示了随机森林的迭代过程。选取一个异常点Xo和一个正常点Xi。纵轴代表了点Xo和Xi在迭代中被区分出时树深度的平均值。可以明显的看到，正常节点平均需要12次随机分类，而异常点只需要4次多就可以被区分出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/iforest_cluster_sampling.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图展示了小规模随机抽样同样可以达到非常好的聚类效果。这在处理大规模数据的时候尤其有用，在多篇文章中，iForest因为这一特性被推荐为首选算法。实现方面有R，Java，Python，搜索一下就有。&lt;/p&gt;

&lt;h2 id=&quot;benchmarking-algorithms-for-detecting-anomalies-in-large-datasets&quot;&gt;BENCHMARKING ALGORITHMS FOR DETECTING ANOMALIES IN LARGE DATASETS&lt;/h2&gt;

&lt;p&gt;这篇&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.188.6153&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;论文&lt;/a&gt;使用了比较常见，简单易得的算法，基于学术界认可的标准数据集，进行了一系列性能，准确度试验，希望得到异常检测这一问题的一个基准。&lt;/p&gt;

&lt;p&gt;本文使用了以下几种算法，因为是调用的Weka，所以算是比较简单的试验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;K邻近（K Nearest Neighbor）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多层神经网络（Multi-layer Perceptron）
可以简单认为是一个复杂参数学习的分类器。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于密度的聚类算法：LOF (Local Outlier Factor)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;随机森林（Random Forest）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Isolation Forest&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;经过一系列试验，结论中推举了以下步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;如果是维度非常高的数据，用J48选Attribute。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用iForest预选异常点，标准为score &amp;gt; 0.50&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把ANN，J48，RF作为一个组合再处理2步得到的异常点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被较多算法标注为异常的点就认为有高可信度。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;主要数据集&quot;&gt;主要数据集&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://kdd.ics.uci.edu/databases/kddcup99/kddcup99.html&quot;&gt;KDDCUP99&lt;/a&gt; 网络流数据。常用入侵检测数据，学术界大量使用。不过据说后来被证明不太可靠。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/numenta/NAB/tree/master/data&quot;&gt;Amazon监控数据&lt;/a&gt; Amazon EC2性能检测的真实检测数据，放出的数据有真实异常，并且有人工标注。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.cert.org/insider-threat/tools/index.cfm&quot;&gt;内部威胁数据&lt;/a&gt; CERT人造的内部威胁数据。人造的方法还是比较科学的，不过异常模式比较简单，知道答案倒推就很容易。不过要自己发现异常就需要比较大的工作量了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/time-series-anomaly-detection/&quot;&gt;时间序列异常检测&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on July 30, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[知乎爬虫]]></title>
  <link rel="alternate" type="text/html" href="http://wurui.cc/tech/zhihu-python-crawler/" />
  <id>http://wurui.cc/tech/zhihu-python-crawler</id>
  <published>2015-07-04T17:54:50+08:00</published>
  <updated>2015-07-04T17:54:50+08:00</updated>
  <author>
    <name>Wu Rui</name>
    <uri>http://wurui.cc</uri>
    <email>ruiwu1990324@gmail.com</email>
  </author>
  <content type="html">
    &lt;p&gt;一直没有写过爬虫程序。感觉都不只是遗憾而是一种缺失了。之前在知乎看到类似&lt;a href=&quot;http://www.zhihu.com/question/27621722&quot;&gt;“能利用爬虫技术做到哪些很酷很有趣很有用的事情？”&lt;/a&gt;，又一次激发了我玩一玩爬虫的兴趣。而爬虫的对象就用知乎好了，语言用我最近正在磨砺的Python。&lt;/p&gt;

&lt;p&gt;知乎作为知识问答式的网站有很强的社交属性。四月的时候知乎社区酝酿成熟，兴起了一波线下聚会。如何让本来陌生的参与者快速找到共同的痛点，轻松识别大小V？社交网络提供了很好的方法。&lt;/p&gt;

&lt;p&gt;先上效果图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://wurui.cc/images/blog/zhihu.png&quot; alt=&quot;Model-View-Controller&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;color:black; font-size: 100%; text-align: center;&quot;&gt;&lt;a href=&quot;http://wurui.cc/visual/zhihu/&quot;&gt;live demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用蓝色点表示用户，用橙色点表示问题。点与点的链接表示用户提出或者回答了某个问题。&lt;/li&gt;
  &lt;li&gt;用户的蓝点大小设置是根据关注数取log，既大V大点，小V小点。&lt;/li&gt;
  &lt;li&gt;鼠标在节点停留会显示名称，用户节点还会显示关注数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他也有一些可以有的功能，但是为了简化砍掉了。我认为一张图不宜包含过量的信息，而应该让用户保持关注核心信息。新式图表容易包含过量，过杂，或者维度过高的信息。这样看起来炫目，然而并不利于用户使用。&lt;/p&gt;

&lt;h3 id=&quot;实现细节&quot;&gt;实现细节&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;Python爬虫现有成熟技术，使用 Beautiful Soup 4 解析 html 文档，使用 requests 处理 http 请求。可以预见已经有前辈做过知乎爬虫。在github搜索以后发现egrcc的&lt;a href=&quot;https://github.com/egrcc/zhihu-python&quot;&gt;zhihu-python&lt;/a&gt; fork数高达207。浏览代码以后发现egrcc已经把提取‘问题’，‘用户’，‘回答’等封装的很完美了。&lt;/p&gt;

&lt;p&gt;第一步，qq向‘椒Club’组织联络员小麦要到名单，只要id就可以了。&lt;/p&gt;

&lt;p&gt;然后遍历id，获得所以Users&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_url&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;分别获得每个user的提问和回答&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_asks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;为了简化图，强化社交熟悉，要求每个问题至少需要和两个以上用户产生链接。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        
    &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     
    &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;questions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteritems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后我们将‘用户节点’，‘问题节点’，‘提问关系’，‘回答关系’一同写入json中，方便后面前段读取。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;write_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usersOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;questionOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;askOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answerOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;源代码请访问&lt;a href=&quot;https://github.com/colin1990324/DataVisualization/tree/master/zhihui-python&quot;&gt;github.com/colin1990324/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;前端部分&quot;&gt;前端部分&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;d3是我前端仅有的经验，这里使用d3.js的force directed graph。&lt;/p&gt;

&lt;p&gt;d3提供了d3.layout.force()来处理节点分布。d3.json()直接读取之前生成的图数据。&lt;/p&gt;

&lt;p&gt;然后就是添加边和点，这里注意分别设置大小，颜色，文本的提取。&lt;/p&gt;

&lt;p&gt;滑动条部分，根据id来显示id&amp;lt;=滑动条的点边，增加一点交互性。这里注意生成图数据的时候，边的Year一定要小于它链接的点的Year，不然就会出现无头边了。&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://wurui.cc/tech/zhihu-python-crawler/&quot;&gt;知乎爬虫&lt;/a&gt; was originally published by Wu Rui at &lt;a href=&quot;http://wurui.cc&quot;&gt;RuiMakes&lt;/a&gt; on July 04, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>